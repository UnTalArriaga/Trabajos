--HACER LO DEL VIDEO PRACTICA PT 1 Y PT 2

SET SERVEROUTPUT ON;

BEGIN
    DBMS_OUTPUT.PUT_LINE('¡HOLA MUNDO!');
END;


DECLARE
    V_MENSAJE VARCHAR(20);
BEGIN
V_NOMBRE := '¡HOLA MUNDO 2!' 
    DBMS_OUTPUT.PUT_LINE(V_MENSAJE);
END;

DECLARE
    V_NOMBRE VARCHAR(20);
BEGIN
V_NOMBRE := '&NOMBRE'
    DBMS_OUTPUT.PUT_LINE('HOLA MUNDO ' || V_NOMBRE);
END;

CREATE TABLE EQUIPO(
    ID NUMBER(3),
    PLACA_BASE VARCHAR(20),
    VENDEDOR VARCHAR(15),
    CONSTRAINT PK_EQUIPO PRIMARY KEY(ID)
);

INSERT INTO EQUIPO VALUES(1, 'ASUS', 'JUAN');
INSERT INTO EQUIPO VALUES(2, 'AMD', 'JUAN');
INSERT INTO EQUIPO VALUES(3, 'AMD', 'JUAN');
INSERT INTO EQUIPO VALUES(4, 'ASUS', 'ANGEL');
INSERT INTO EQUIPO VALUES(5, 'INTEL', 'ANGEL');
INSERT INTO EQUIPO VALUES(6, 'ASUS', 'ANGEL');
INSERT INTO EQUIPO VALUES(7, 'ASUS', 'WENDY');
INSERT INTO EQUIPO VALUES(8, 'RYZEN', 'ANGEL');

SELECT * FROM EQUIPO;

SELECT PLACA_BASE, VENDEDOR
FROM EQUIPO
WHERE ID=1;

SELECT PLACA_BASE, VENDEDOR
FROM EQUIPO
WHERE ID='&ID';

--ERROR
DECLARE 
    V_ID NUMBER(6) := '&ID';
    V_PLACA_BASE VARCHAR(20);
    V_VENDEDOR VARCHAR(15);
BEGIN
    SELECT PLACA_BASE, VENDEDOR
    FROM EQUIPO
    WHERE ID='&ID';
    DBMS_OUTPUT.PUT_LINE('                                          ');
    DBMS_OUTPUT.PUT_LINE(V_ID || ' SU MARCA DE PROCESADOR ES: ' || V_PLACA_BASE || ' SU VENDEDOR ES: ' || V_VENDEDOR);
END;
--2 VECES
DECLARE 
    V_ID NUMBER(6) := '&ID';
    V_PLACA_BASE VARCHAR(20);
    V_VENDEDOR VARCHAR(15);
BEGIN
    SELECT PLACA_BASE, VENDEDOR
    INTO V_PLACA_BASE, V_VENDEDOR
    FROM EQUIPO
    WHERE ID= V_ID;
    DBMS_OUTPUT.PUT_LINE('                                          ');
    DBMS_OUTPUT.PUT_LINE(V_ID || ' SU MARCA DE PROCESADOR ES: ' || V_PLACA_BASE || ' SU VENDEDOR ES: ' || V_VENDEDOR);
END;

DECLARE
    V_TOTAL_EQUIPOS NUMBER (2);
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL_EQUIPOS
    FROM EQUIPO;
    DBMS_OUTPUT.PUT_LINE('                                          ');
    DBMS_OUTPUT.PUT_LINE('Total de equpos: ' || V_TOTAL_EQUIPOS);
END;

CREATE OR REPLACE PROCEDURE DETALLE(P_ID NUMBER)
AS
    V_PLACA_BASE VARCHAR(20);
    V_VENDEDOR VARCHAR(15);
BEGIN
    SELECT PLACA_BASE, VENDEDOR
    INTO V_PLACA_BASE, V_VENDEDOR
    FROM EQUIPO
    WHERE ID=P_ID;
    DBMS_OUTPUT.PUT_LINE('                                          ');
    DBMS_OUTPUT.PUT_LINE(P_ID || ' SU MARCA DE PROCESADOR ES: ' || V_PLACA_BASE || ' SU VENDEDOR ES: ' || V_VENDEDOR);
END;

EXEC DETALLE(7);
EXEC DETALLE('&ID');

CREATE OR REPLACE PROCEDURE TOTAL(P_VENDEDOR VARCHAR)
AS
    V_TOTAL_EQUIPOS NUMBER (2);
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL_EQUIPOS
    FROM EQUIPO
    WHERE VENDEDOR =P_VENDEDOR;
    DBMS_OUTPUT.PUT_LINE('                                          ');
    DBMS_OUTPUT.PUT_LINE('Total de equpos: ' || V_TOTAL_EQUIPOS);
END;

EXEC TOTAL('ANGEL');

CREATE TABLE MOV(
    TIPO VARCHAR(2O),
    USUARIO VARCHAR(20),
    FECHA TIMESTAMP
)

CREATE OR REPLACE TRIGGER AUDITOR
BEFORE INSERT OR UPDATE OR DELETE ON EQUIPO
FOR EACH ROW
DECLARE
BEGIN
    IF INSERTING THEN
        INSERT INTO MOV VALUES('INSERTO', USER, SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO MOV VALUES('ACTUALIZAO', USER, SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO MOV VALUES('ELIMINO', USER, SYSDATE);
    END IF;
END;

SELECT * FROM MOV;
INSERT INTO EQUIPO VALUES (9, 'RYZEN', WENDY);
INSERT INTO EQUIPO VALUES (10, 'INTEL', WENDY);
SELECT * FROM MOV;

UPDATE EQUIPO 
SET VENDEDOR='WENDI' 
WHERE VENDEDOR = 'WENDY';
SELECT * FROM EQUIPO;
SELECT * FROM MOV;

DELETE FROM EQUIPO WHERE ID=1;
SELECT * FROM EQUIPO;
SELECT * FROM MOV;

--PARTE 2
DROP TABLE EQUIPO;
CREATE TABLE EQUIPO(
    ID NUMBER(3),
    PLACA_BASE VARCHAR(20),
    VENDEDOR VARCHAR(15),
    CONSTRAINT PK_EQUIPO PRIMARY KEY(ID)
);

INSERT INTO EQUIPO VALUES(1, 'ASUS', 'JUAN');
INSERT INTO EQUIPO VALUES(2, 'AMD', 'JUAN');
INSERT INTO EQUIPO VALUES(3, 'AMD', 'JUAN');
INSERT INTO EQUIPO VALUES(4, 'ASUS', 'ANGEL');
INSERT INTO EQUIPO VALUES(5, 'INTEL', 'ANGEL');
INSERT INTO EQUIPO VALUES(6, 'ASUS', 'ANGEL');
INSERT INTO EQUIPO VALUES(7, 'ASUS', 'WENDY');
INSERT INTO EQUIPO VALUES(8, 'RYZEN', 'ANGEL');

CREATE SEQUENCE ID_EQUIPO
START WITH 9
INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE INSERTAR(P_PLACA VARCHAR, P_NOMBRE VARCHAR)
IS
BEGIN
    INSERT INTO EQUIPO VALUES(ID_EQUIPO.NEXTVAL, P_PLACA, P_NOMBRE);
END;

EXEC INSERTAR('RYZEN', 'BETO');
EXEC INSERTAR('INTEL', 'ALEX');

CREATE OR REPLACE PROCEDURE INSERTAR(P_PLACA VARCHAR, P_NOMBRE VARCHAR)
IS
BEGIN
    INSERT INTO EQUIPO VALUES(ID_EQUIPO.NEXTVAL, P_PLACA, P_NOMBRE);
    DBMS_OUTPUT.PUT_LINE('ALTA CORRECTA');
END;

EXEC INSERTAR('RYEL', 'MONSE');
SELECT * FROM EQUIPO;

--HACERLO CON BETO, ALEX, MONSE, ANGEL <= DA ERROR
DECLARE
    V_ID NUMBER(4);
    V_PLACA_BASE VARCHAR(20);
    V_VENDEDOR VARCHAR(15) := '&VENDEDOR';
BEGIN
    SELECT ID, PLACA_BASE
    INTO V_ID, V_PLACA_BASE
    FROM EQUIPO
    WHERE VENDEDOR = V_VENDEDOR;

    DBMS_OUTPUT.PUT_LINE('EL ID: ' || V_ID);
    DBMS_OUTPUT.PUT_LINE('ESTA RELACIONADO CON LA PLACA: ' || V_PLACA_BASE);
END;

--CURSOR
DECLARE
    V_ID NUMBER(4);
    V_PLACA_BASE VARCHAR(20);
    V_VENDEDOR VARCHAR(15) := '&VENDEDOR';
CURSOR C_ANALISIS IS
    SELECT ID, PLACA_BASE
    FROM EQUIPO
    WHERE VENDEDOR = V_VENDEDOR;
BEGIN
    OPEN C_ANALISIS
        LOOP
            FETCH C_ANALISIS INTO V_ID, V_PLACA_BASE;
            DBMS_OUTPUT.PUT_LINE('EL ID: ' || V_ID);
            DBMS_OUTPUT.PUT_LINE('ESTA RELACIONADO CON LA PLACA: ' || V_PLACA_BASE);
            EXIT WHEN C_ANALISIS%NOTFOUND;
        END LOOP;
    CLOSE C_ANALISIS;
    DBMS_OUTPUT.PUT_LINE('PROCESO CONCLUIDO');
END;

BEGIN
    FOR V_TODO IN (SELECT * FROM EQUIPO WHERE VENDEDOR = '&VENDEDOR');
    LOOP
        DBMS_OUTPUT.PUT_LINE('EL ID: ' || V_TODO.ID);
        DBMS_OUTPUT.PUT_LINE('ESTA RELACIONADO CON LA PLACA: ' || V_TODO.PLACA_BASE);
        DBMS_OUTPUT.PUT_LINE('EL VENDEDOR FUE: ' || V_TODO.VENDEDOR);
    END LOOP;
END;



----------------RESULTADOS---------------------------------
--GENERAR UN PROCEDIMIENTO PARA ACTUALIZAR Y OTRO PARA ELIMINAR POR ID
--UN CURSOR ANIDADO SOBRE LA TABLA DE EQUIPOS
CREATE OR REPLACE PROCEDURE ACTUALIZAR(P_ID NUMBER)
IS
BEGIN
    UPDATE EQUIPO
    SET PLACA_BASE = '&PLACA BASE',
    VENDEDOR = "&VENDEDOR"
    WHERE ID = P_ID;
    DBMS_OUTPUT.PUT_LINE('ACTUALIZACION CORRECTA');
END;

CREATE OR REPLACE PROCEDURE ELIMINAR(P_ID NUMBER)
IS
BEGIN
    DELETE EQUIPO
    WHERE ID=P_ID;
    DBMS_OUTPUT.PUT_LINE('ELIMINACION CORRECTA');
END;



DECLARE
    V_ID NUMBER(4);
    V_PLACA_BASE VARCHAR(20);
    V_VENDEDOR VARCHAR(15) := '&VENDEDOR';
CURSOR C_VENDEDOR IS
    SELECT PLACA_BASE
    FROM EQUIPO
    WHERE VENDEDOR = V_VENDEDOR;
CURSOR C_PLACA IS
    SELECT ID
    FROM EQUIPO
    WHERE PLACA_BASE = V_PLACA_BASE;
BEGIN
    OPEN C_VENDEDOR
            LOOP
                FETCH C_VENDEDOR INTO V_PLACA_BASE;
                EXIT WHEN C_VENDEDOR%NOTFOUND;
                OPEN C_PLACA
                    LOOP
                        FETCH C_PLACA INTO V_ID;
                        EXIT WHEN C_PLACA%NOTFOUND;
                        DBMS_OUTPUT.PUT_LINE('ID: ' || V_ID || ' PLACA: ' || V_PLACA_BASE);
                    END LOOP;
                CLOSE C_PLACA;
            END LOOP;
    CLOSE C_VENDEDOR;
    DBMS_OUTPUT.PUT_LINE('PROCESO CONCLUIDO');
END;













---------------------------------------------------------------------------


--2 DECLARAR VARIABLE Y CONCATENAR CON LA IMPRESION
--ESTE NO
DECLARE
    V_NOMBRE VARCHAR(20);
BEGIN
V_NOMBRE := 'JOSE CARLOS'
    DBMS_OUTPUT.PUT_LINE('HOLA MUNDO ' || V_NOMBRE);
END;

--3 PIDE QUE INSERTE UN NOMBRE Y LO IMPRIME
DECLARE
    V_NOMBRE VARCHAR(20);
BEGIN
V_NOMBRE := '&NOMBRE'
    DBMS_OUTPUT.PUT_LINE('HOLA MUNDO ' || V_NOMBRE);
END;

--4 PARA REALIZAR CONSULTAS SE NECESITAN GUARDAR LOS DATOS TEMPORALMENTE EN LAS VARIABLE PARA PODER MOSTRAR LOS RESULTADOS
DECLARE
    V_ID NUMBER(3) := '&ID';
    V_NOMBRE VARCHAR(20);
    V_APELLIDO VARCHAR(20);
BEGIN
    SELECT NOMBRE, APELLIDO
    INTO V_NOMBRE, V_APELLIDO
    FROM OBRERO
    WHERE ID_OBRERO = V_ID;
    DBMS_OUTPUT.PUT_LINE('EL ID ES: ' || V_ID);
    DBMS_OUTPUT.PUT_LINE('EL OBRERO ES: ' || V_NOMBRE || ' ' || V_APELLIDO);
END;

--5 SE PUEDE METER EN LOS BLOQUES ANONIMOS TODO LO VISTO HASTA AHORA (CONSULTAS, JOINS, SUBCONSULTA)
DECLARE
    V_ID NUMBER(3) := '&ID';
    V_NOMBRE VARCHAR(20);
    V_APELLIDO VARCHAR(20);
    V_SUELDO NUMBER(9);
BEGIN
    SELECT O.NOMBRE, O.APELLIDO, C.SUELDO
    INTO V_NOMBRE, V_APELLIDO, V_SUELDO
    FROM OBRERO O INNER JOIN CLASIFICACION C
    ON O.ID_CLASIFICACION = C.ID_CLASIFICACION
    WHERE ID_OBRERO = V_ID;
    DBMS_OUTPUT.PUT_LINE('EL ID ES: ' || V_ID);
    DBMS_OUTPUT.PUT_LINE('EL OBRERO ES: ' || V_NOMBRE || ' ' || V_APELLIDO);
    DBMS_OUTPUT.PUT_LINE('CUYO SUELDO ES: ' || V_SUELDO);
END;

--6
DECLARE
    V_ID NUMBER(3) := '&ID';
    V_NOMBRE VARCHAR(20);
    V_APELLIDO VARCHAR(20);
    V_SUELDO NUMBER(9);
BEGIN
    SELECT O.NOMBRE, O.APELLIDO, C.SUELDO
    INTO V_NOMBRE, V_APELLIDO, V_SUELDO
    FROM OBRERO O INNER JOIN CLASIFICACION C
    ON O.ID_CLASIFICACION = C.ID_CLASIFICACION
    WHERE ID_OBRERO = V_ID;
    DBMS_OUTPUT.PUT_LINE('EL ID ES: ' || V_ID);
    DBMS_OUTPUT.PUT_LINE('EL OBRERO ES: ' || V_NOMBRE || ' ' || V_APELLIDO);
    DBMS_OUTPUT.PUT_LINE('CUYO SUELDO ES: ' || V_SUELDO);
    IF V_SUELDO < 10000 THEN
        DBMS_OUTPUT.PUT_LINE('NO TE CONVIENE');
    ELSIF V_SUELDO < 20000 THEN
        DBMS_OUTPUT.PUT_LINE('SIGUE SIENDO POBRE');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('POS PA EMPEZAR');
    END IF;
END;

--7 CREANDO PROCEDIMIENTO
CREATE OR REPLACE PROCEDURE OBEXSUELDO(P_ID NUMBER)
IS
    V_NOMBRE VARCHAR(20);
    V_APELLIDO VARCHAR(20);
    V_SUELDO NUMBER(9);
BEGIN
    SELECT O.NOMBRE, O.APELLIDO, C.SUELDO
    INTO V_NOMBRE, V_APELLIDO, V_SUELDO
    FROM OBRERO O INNER JOIN CLASIFICACION C
    ON O.ID_CLASIFICACION = C.ID_CLASIFICACION
    WHERE ID_OBRERO = P_ID;
    DBMS_OUTPUT.PUT_LINE('EL ID ES: ' || P_ID);
    DBMS_OUTPUT.PUT_LINE('EL OBRERO ES: ' || V_NOMBRE || ' ' || V_APELLIDO);
    DBMS_OUTPUT.PUT_LINE('CUYO SUELDO ES: ' || V_SUELDO);
    IF V_SUELDO < 10000 THEN
        DBMS_OUTPUT.PUT_LINE('NO TE CONVIENE');
    ELSIF V_SUELDO < 20000 THEN
        DBMS_OUTPUT.PUT_LINE('SIGUE SIENDO POBRE');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('POS PA EMPEZAR');
    END IF;
END;

EXECUTE OBEXSUELDO (1);
-- =
EXEC OBEXSUELDO(1);

--TRIGGERS
CREATE TABLE PRUEBITAS(
    ID NUMBER(3),
    NOMBRE VARCHAR(20),
    CLASIFICACION NUMBER(1)
);

CREATE TABLE MOV_GPO4(
    USUARIO VARCHAR(20),
    PRESICION TIMESTAMP
);

CREATE OR REPLACE TRIGGER AUDITOR
AFTER INSERT ON PRUEBITAS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO MOV_GPO4 VALUES(USER, SYSDATE)
END;


INSERT INTO PRUEBITAS VALUES (1, 'DANIELA', 5);
INSERT INTO PRUEBITAS VALUES (2, 'TAVO', 5);
INSERT INTO PRUEBITAS VALUES (3, 'ALEJANDRO', 5);
INSERT INTO PRUEBITAS VALUES (4, 'OSMAR', 5);

SELECT * FROM PRUEBITAS;
SELECT * FROM MOV_GPO4;
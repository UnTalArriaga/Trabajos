CCS PCM C Compiler, Version 5.093, 4770               12-may.-23 12:19

               Filename:   D:\Escuela\Semestre 23-2\LabMicros\Previos\P8\EJ7\EJ7.lst

               ROM used:   440 words (5%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           24 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   17C
0003:  NOP
.................... #include <16F877.h> //biblioteca del micro
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
*
00EB:  MOVF   2A,W
00EC:  CLRF   78
00ED:  SUBWF  29,W
00EE:  BTFSC  03.0
00EF:  GOTO   0F3
00F0:  MOVF   29,W
00F1:  MOVWF  77
00F2:  GOTO   0FF
00F3:  CLRF   77
00F4:  MOVLW  08
00F5:  MOVWF  2B
00F6:  RLF    29,F
00F7:  RLF    77,F
00F8:  MOVF   2A,W
00F9:  SUBWF  77,W
00FA:  BTFSC  03.0
00FB:  MOVWF  77
00FC:  RLF    78,F
00FD:  DECFSZ 2B,F
00FE:  GOTO   0F6
00FF:  RETURN
0100:  MOVLW  20
0101:  BTFSS  24.4
0102:  MOVLW  30
0103:  MOVWF  25
0104:  MOVF   23,W
0105:  MOVWF  77
0106:  BTFSS  23.7
0107:  GOTO   110
0108:  COMF   77,F
0109:  INCF   77,F
010A:  MOVF   77,W
010B:  MOVWF  23
010C:  MOVLW  2D
010D:  MOVWF  25
010E:  BSF    24.7
010F:  BSF    24.0
0110:  MOVF   23,W
0111:  MOVWF  29
0112:  MOVLW  64
0113:  MOVWF  2A
0114:  CALL   0EB
0115:  MOVF   77,W
0116:  MOVWF  23
0117:  MOVLW  30
0118:  ADDWF  78,W
0119:  MOVWF  26
011A:  MOVF   23,W
011B:  MOVWF  29
011C:  MOVLW  0A
011D:  MOVWF  2A
011E:  CALL   0EB
011F:  MOVLW  30
0120:  ADDWF  77,W
0121:  MOVWF  28
0122:  MOVLW  30
0123:  ADDWF  78,W
0124:  MOVWF  27
0125:  MOVF   25,W
0126:  MOVWF  77
0127:  MOVLW  30
0128:  SUBWF  26,W
0129:  BTFSC  03.2
012A:  GOTO   12F
012B:  BSF    24.1
012C:  BTFSC  24.7
012D:  BSF    24.2
012E:  GOTO   143
012F:  MOVF   25,W
0130:  MOVWF  26
0131:  MOVLW  20
0132:  MOVWF  25
0133:  MOVLW  30
0134:  SUBWF  27,W
0135:  BTFSC  03.2
0136:  GOTO   13B
0137:  BSF    24.0
0138:  BTFSC  24.7
0139:  BSF    24.1
013A:  GOTO   143
013B:  BTFSS  03.2
013C:  BSF    24.0
013D:  BTFSS  03.2
013E:  GOTO   143
013F:  MOVF   26,W
0140:  MOVWF  27
0141:  MOVLW  20
0142:  MOVWF  26
0143:  BTFSC  24.2
0144:  GOTO   14A
0145:  BTFSC  24.1
0146:  GOTO   14D
0147:  BTFSC  24.0
0148:  GOTO   150
0149:  GOTO   153
014A:  MOVF   25,W
014B:  MOVWF  29
014C:  CALL   0BF
014D:  MOVF   26,W
014E:  MOVWF  29
014F:  CALL   0BF
0150:  MOVF   27,W
0151:  MOVWF  29
0152:  CALL   0BF
0153:  MOVF   28,W
0154:  MOVWF  29
0155:  CALL   0BF
0156:  BCF    0A.3
0157:  BCF    0A.4
0158:  GOTO   1A0 (RETURN)
0159:  BTFSC  24.7
015A:  GOTO   16B
015B:  MOVLW  0F
015C:  MOVWF  77
015D:  SWAPF  23,W
015E:  ANDWF  77,F
015F:  MOVLW  0A
0160:  SUBWF  77,W
0161:  BTFSC  03.0
0162:  GOTO   166
0163:  MOVLW  30
0164:  ADDWF  77,F
0165:  GOTO   168
0166:  MOVF   24,W
0167:  ADDWF  77,F
0168:  MOVF   77,W
0169:  MOVWF  29
016A:  CALL   0BF
016B:  MOVLW  0F
016C:  ANDWF  23,F
016D:  MOVLW  0A
016E:  SUBWF  23,W
016F:  BTFSC  03.0
0170:  GOTO   173
0171:  MOVLW  30
0172:  GOTO   175
0173:  BCF    24.7
0174:  MOVF   24,W
0175:  ADDWF  23,F
0176:  MOVF   23,W
0177:  MOVWF  29
0178:  CALL   0BF
0179:  BCF    0A.3
017A:  BCF    0A.4
017B:  GOTO   1B0 (RETURN)
.................... 
.................... #list
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP //parametros físicos-eléctricos controlador
.................... #use delay(clock=20000000) // 20 MHz establece el reloj a utilizar
*
0004:  MOVLW  2A
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #define use_portd_lcd true // establece PORTD como conexión del display LCD
.................... #include <lcd.c> //biblioteca para control de display LCD.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0033:  MOVLW  0F
0034:  BSF    03.5
0035:  ANDWF  08,W
0036:  IORLW  F0
0037:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0038:  BCF    03.5
0039:  BSF    08.2
....................    delay_cycles(1);
003A:  NOP
....................    lcd_output_enable(1);
003B:  BSF    08.0
....................    delay_cycles(1);
003C:  NOP
....................    high = lcd_read_nibble();
003D:  CALL   027
003E:  MOVF   78,W
003F:  MOVWF  31
....................       
....................    lcd_output_enable(0);
0040:  BCF    08.0
....................    delay_cycles(1);
0041:  NOP
....................    lcd_output_enable(1);
0042:  BSF    08.0
....................    delay_us(1);
0043:  GOTO   044
0044:  GOTO   045
0045:  NOP
....................    low = lcd_read_nibble();
0046:  CALL   027
0047:  MOVF   78,W
0048:  MOVWF  30
....................       
....................    lcd_output_enable(0);
0049:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
004A:  MOVLW  0F
004B:  BSF    03.5
004C:  ANDWF  08,W
004D:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
004E:  BCF    03.5
004F:  SWAPF  31,W
0050:  MOVWF  77
0051:  MOVLW  F0
0052:  ANDWF  77,F
0053:  MOVF   77,W
0054:  IORWF  30,W
0055:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0027:  MOVF   08,W
0028:  MOVWF  77
0029:  SWAPF  08,W
002A:  ANDLW  0F
002B:  MOVWF  78
....................   #endif
002C:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0018:  SWAPF  31,W
0019:  ANDLW  F0
001A:  MOVWF  77
001B:  MOVLW  0F
001C:  ANDWF  08,W
001D:  IORWF  77,W
001E:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
001F:  NOP
....................    lcd_output_enable(1);
0020:  BSF    08.0
....................    delay_us(2);
0021:  MOVLW  03
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
....................    lcd_output_enable(0);
0025:  BCF    08.0
0026:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
002D:  BSF    03.5
002E:  BCF    08.0
....................    lcd_rs_tris();
002F:  BCF    08.1
....................    lcd_rw_tris();
0030:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0031:  BCF    03.5
0032:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0056:  MOVF   78,W
0057:  MOVWF  30
0058:  BTFSC  30.7
0059:  GOTO   033
....................    lcd_output_rs(address);
005A:  BTFSS  2E.0
005B:  BCF    08.1
005C:  BTFSC  2E.0
005D:  BSF    08.1
....................    delay_cycles(1);
005E:  NOP
....................    lcd_output_rw(0);
005F:  BCF    08.2
....................    delay_cycles(1);
0060:  NOP
....................    lcd_output_enable(0);
0061:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0062:  SWAPF  2F,W
0063:  MOVWF  30
0064:  MOVLW  0F
0065:  ANDWF  30,F
0066:  MOVF   30,W
0067:  MOVWF  31
0068:  CALL   018
....................    lcd_send_nibble(n & 0xf);
0069:  MOVF   2F,W
006A:  ANDLW  0F
006B:  MOVWF  30
006C:  MOVWF  31
006D:  CALL   018
006E:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
006F:  MOVLW  28
0070:  MOVWF  24
0071:  MOVLW  0C
0072:  MOVWF  25
0073:  MOVLW  01
0074:  MOVWF  26
0075:  MOVLW  06
0076:  MOVWF  27
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0077:  BCF    08.0
....................    lcd_output_rs(0);
0078:  BCF    08.1
....................    lcd_output_rw(0);
0079:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007A:  MOVLW  0F
007B:  BSF    03.5
007C:  ANDWF  08,W
007D:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
007E:  BCF    08.0
....................    lcd_rs_tris();
007F:  BCF    08.1
....................    lcd_rw_tris();
0080:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0081:  MOVLW  0F
0082:  BCF    03.5
0083:  MOVWF  2A
0084:  CALL   004
....................    for(i=1;i<=3;++i)
0085:  MOVLW  01
0086:  MOVWF  23
0087:  MOVF   23,W
0088:  SUBLW  03
0089:  BTFSS  03.0
008A:  GOTO   093
....................    {
....................        lcd_send_nibble(3);
008B:  MOVLW  03
008C:  MOVWF  31
008D:  CALL   018
....................        delay_ms(5);
008E:  MOVLW  05
008F:  MOVWF  2A
0090:  CALL   004
0091:  INCF   23,F
0092:  GOTO   087
....................    }
....................    
....................    lcd_send_nibble(2);
0093:  MOVLW  02
0094:  MOVWF  31
0095:  CALL   018
....................    delay_ms(5);
0096:  MOVLW  05
0097:  MOVWF  2A
0098:  CALL   004
....................    for(i=0;i<=3;++i)
0099:  CLRF   23
009A:  MOVF   23,W
009B:  SUBLW  03
009C:  BTFSS  03.0
009D:  GOTO   0AA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
009E:  MOVLW  24
009F:  ADDWF  23,W
00A0:  MOVWF  04
00A1:  BCF    03.7
00A2:  MOVF   00,W
00A3:  MOVWF  28
00A4:  CLRF   2E
00A5:  MOVF   28,W
00A6:  MOVWF  2F
00A7:  CALL   02D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00A8:  INCF   23,F
00A9:  GOTO   09A
00AA:  BCF    0A.3
00AB:  BCF    0A.4
00AC:  GOTO   187 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00AD:  DECFSZ 2B,W
00AE:  GOTO   0B0
00AF:  GOTO   0B3
....................       address=LCD_LINE_TWO;
00B0:  MOVLW  40
00B1:  MOVWF  2C
00B2:  GOTO   0B4
....................    else
....................       address=0;
00B3:  CLRF   2C
....................      
....................    address+=x-1;
00B4:  MOVLW  01
00B5:  SUBWF  2A,W
00B6:  ADDWF  2C,F
....................    lcd_send_byte(0,0x80|address);
00B7:  MOVF   2C,W
00B8:  IORLW  80
00B9:  MOVWF  2D
00BA:  CLRF   2E
00BB:  MOVF   2D,W
00BC:  MOVWF  2F
00BD:  CALL   02D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00BE:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00BF:  MOVF   29,W
00C0:  XORLW  07
00C1:  BTFSC  03.2
00C2:  GOTO   0CD
00C3:  XORLW  0B
00C4:  BTFSC  03.2
00C5:  GOTO   0D2
00C6:  XORLW  06
00C7:  BTFSC  03.2
00C8:  GOTO   0DA
00C9:  XORLW  02
00CA:  BTFSC  03.2
00CB:  GOTO   0E0
00CC:  GOTO   0E5
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00CD:  MOVLW  01
00CE:  MOVWF  2A
00CF:  MOVWF  2B
00D0:  CALL   0AD
00D1:  GOTO   0EA
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00D2:  CLRF   2E
00D3:  MOVLW  01
00D4:  MOVWF  2F
00D5:  CALL   02D
....................                      delay_ms(2);
00D6:  MOVLW  02
00D7:  MOVWF  2A
00D8:  CALL   004
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00D9:  GOTO   0EA
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00DA:  MOVLW  01
00DB:  MOVWF  2A
00DC:  MOVLW  02
00DD:  MOVWF  2B
00DE:  CALL   0AD
00DF:  GOTO   0EA
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00E0:  CLRF   2E
00E1:  MOVLW  10
00E2:  MOVWF  2F
00E3:  CALL   02D
00E4:  GOTO   0EA
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00E5:  MOVLW  01
00E6:  MOVWF  2E
00E7:  MOVF   29,W
00E8:  MOVWF  2F
00E9:  CALL   02D
....................      #endif
....................    }
00EA:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... // Variables globales
.................... int conteo; // lleva la cuenta de veces que se activa señal
.................... int dato; // lectura de señal
.................... int ante; // señal anterior (no contar varias veces una misma activación)
.................... 
.................... // el programa escribe la cuenta de activaciones en decimal y hexadecimal
.................... // en el display LCD.
.................... void main() {
*
017C:  MOVF   03,W
017D:  ANDLW  1F
017E:  MOVWF  03
017F:  BSF    03.5
0180:  BSF    1F.0
0181:  BSF    1F.1
0182:  BSF    1F.2
0183:  BCF    1F.3
0184:  BCF    03.7
....................    lcd_init(); //inicialización del display
0185:  BCF    03.5
0186:  GOTO   06F
....................    conteo=0;
0187:  CLRF   20
....................    while( TRUE ) {
....................       ante=dato;
0188:  MOVF   21,W
0189:  MOVWF  22
....................       dato=input_state(PIN_A0);
018A:  CLRF   21
018B:  BTFSC  05.0
018C:  INCF   21,F
....................       if(dato==1 && dato!=ante){ // detecta solo cambio por subida
018D:  DECFSZ 21,W
018E:  GOTO   193
018F:  MOVF   22,W
0190:  SUBWF  21,W
0191:  BTFSS  03.2
....................          conteo++;
0192:  INCF   20,F
....................       }
....................       lcd_gotoxy(5,1); //posiciona cursor en (5,1) inicio del primero
0193:  MOVLW  05
0194:  MOVWF  2A
0195:  MOVLW  01
0196:  MOVWF  2B
0197:  CALL   0AD
....................       printf(lcd_putc," %d\n", conteo); //escribe los chars en el LCD
0198:  MOVLW  20
0199:  MOVWF  29
019A:  CALL   0BF
019B:  MOVF   20,W
019C:  MOVWF  23
019D:  MOVLW  18
019E:  MOVWF  24
019F:  GOTO   100
01A0:  MOVLW  0A
01A1:  MOVWF  29
01A2:  CALL   0BF
....................       lcd_gotoxy(5,2); //posiciona cursor en (5,2) inicio del segundo
01A3:  MOVLW  05
01A4:  MOVWF  2A
01A5:  MOVLW  02
01A6:  MOVWF  2B
01A7:  CALL   0AD
....................       printf(lcd_putc," %x\n", conteo); //escribe los chars en el LCD
01A8:  MOVLW  20
01A9:  MOVWF  29
01AA:  CALL   0BF
01AB:  MOVF   20,W
01AC:  MOVWF  23
01AD:  MOVLW  57
01AE:  MOVWF  24
01AF:  GOTO   159
01B0:  MOVLW  0A
01B1:  MOVWF  29
01B2:  CALL   0BF
....................       delay_ms(100); //retardo de 300ms
01B3:  MOVLW  64
01B4:  MOVWF  2A
01B5:  CALL   004
01B6:  GOTO   188
....................    } //end while
.................... }//end main
.................... 
01B7:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

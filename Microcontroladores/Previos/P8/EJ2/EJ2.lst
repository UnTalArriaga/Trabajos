CCS PCM C Compiler, Version 5.093, 4770               12-may.-23 12:18

               Filename:   D:\Escuela\Semestre 23-2\LabMicros\Previos\P8\EJ2\EJ2.lst

               ROM used:   59 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <16f877.h> //biblioteca del micro
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
.................... 
.................... #list
.................... 
.................... #fuses HS,NOPROTECT, //parámetros físicos - eléctricos del controlador
.................... #use delay(clock=20000000) // 20 MHz establece el reloj a utilizar
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... // reserva la memoria donde esta el bootloader
.................... #org 0x1F00, 0x1FFF void loader16F877(void) {}
*
1F00:  RETURN
.................... // El código prende y apaga 8 bits de la salida portb cada segundo.
.................... void main(){
*
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  BSF    03.5
001C:  BSF    1F.0
001D:  BSF    1F.1
001E:  BSF    1F.2
001F:  BCF    1F.3
0020:  BCF    03.7
....................    while(1){
....................       output_b(0xff); // '11111111' salida para portb
0021:  CLRF   06
0022:  MOVLW  FF
0023:  BCF    03.5
0024:  MOVWF  06
....................       delay_ms(1000); // retardo de 1s
0025:  MOVLW  04
0026:  MOVWF  21
0027:  MOVLW  FA
0028:  MOVWF  22
0029:  CALL   004
002A:  DECFSZ 21,F
002B:  GOTO   027
....................       output_b(0x00); // '00000000' salida para portb
002C:  BSF    03.5
002D:  CLRF   06
002E:  BCF    03.5
002F:  CLRF   06
....................       delay_ms(1000); // retardo de 1s
0030:  MOVLW  04
0031:  MOVWF  21
0032:  MOVLW  FA
0033:  MOVWF  22
0034:  CALL   004
0035:  DECFSZ 21,F
0036:  GOTO   032
0037:  BSF    03.5
0038:  GOTO   021
....................    } //while
.................... }//main
.................... 
0039:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

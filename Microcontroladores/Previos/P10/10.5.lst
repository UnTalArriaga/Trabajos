CCS PCM C Compiler, Version 5.093, 4770               26-may.-23 16:43

               Filename:   C:\Users\tobad\Desktop\p10\10.5.lst

               ROM used:   1008 words (12%)
                           Largest free fragment is 2048
               RAM used:   33 (9%) at main() level
                           54 (15%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   383
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   054
002B:  BTFSS  0B.3
002C:  GOTO   02F
002D:  BTFSC  0B.0
002E:  GOTO   057
002F:  BTFSS  0B.4
0030:  GOTO   033
0031:  BTFSC  0B.1
0032:  GOTO   05A
0033:  MOVF   22,W
0034:  MOVWF  04
0035:  MOVF   23,W
0036:  MOVWF  77
0037:  MOVF   24,W
0038:  MOVWF  78
0039:  MOVF   25,W
003A:  MOVWF  79
003B:  MOVF   26,W
003C:  MOVWF  7A
003D:  MOVF   27,W
003E:  BSF    03.6
003F:  MOVWF  0D
0040:  BCF    03.6
0041:  MOVF   28,W
0042:  BSF    03.6
0043:  MOVWF  0F
0044:  BCF    03.6
0045:  MOVF   29,W
0046:  BSF    03.6
0047:  MOVWF  0C
0048:  BCF    03.6
0049:  MOVF   2A,W
004A:  BSF    03.6
004B:  MOVWF  0E
004C:  BCF    03.6
004D:  MOVF   20,W
004E:  MOVWF  0A
004F:  SWAPF  21,W
0050:  MOVWF  03
0051:  SWAPF  7F,F
0052:  SWAPF  7F,W
0053:  RETFIE
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   065
0057:  BCF    0A.3
0058:  BCF    0A.4
0059:  GOTO   110
005A:  BCF    0A.3
005B:  BCF    0A.4
005C:  GOTO   097
.................... //Se importa la biblioteca del PIC16F877
.................... #include <16F877.h>
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
005D:  BCF    0A.0
005E:  BCF    0A.1
005F:  BCF    0A.2
0060:  ADDWF  02,F
0061:  RETLW  28
0062:  RETLW  0C
0063:  RETLW  01
0064:  RETLW  06
*
00B8:  MOVF   0B,W
00B9:  MOVWF  4D
00BA:  BCF    0B.7
00BB:  BSF    03.5
00BC:  BSF    03.6
00BD:  BSF    0C.7
00BE:  BSF    0C.0
00BF:  NOP
00C0:  NOP
00C1:  BCF    03.5
00C2:  BCF    03.6
00C3:  BTFSC  4D.7
00C4:  BSF    0B.7
00C5:  BSF    03.6
00C6:  MOVF   0C,W
00C7:  ANDLW  7F
00C8:  BTFSC  03.2
00C9:  GOTO   10E
00CA:  BCF    03.6
00CB:  MOVWF  4D
00CC:  BSF    03.6
00CD:  MOVF   0D,W
00CE:  BCF    03.6
00CF:  MOVWF  4E
00D0:  BSF    03.6
00D1:  MOVF   0F,W
00D2:  BCF    03.6
00D3:  MOVWF  4F
00D4:  MOVF   4D,W
00D5:  BTFSS  0C.4
00D6:  GOTO   0D5
00D7:  MOVWF  19
00D8:  MOVF   4E,W
00D9:  BSF    03.6
00DA:  MOVWF  0D
00DB:  BCF    03.6
00DC:  MOVF   4F,W
00DD:  BSF    03.6
00DE:  MOVWF  0F
00DF:  BCF    03.6
00E0:  MOVF   0B,W
00E1:  MOVWF  50
00E2:  BCF    0B.7
00E3:  BSF    03.5
00E4:  BSF    03.6
00E5:  BSF    0C.7
00E6:  BSF    0C.0
00E7:  NOP
00E8:  NOP
00E9:  BCF    03.5
00EA:  BCF    03.6
00EB:  BTFSC  50.7
00EC:  BSF    0B.7
00ED:  BSF    03.6
00EE:  RLF    0C,W
00EF:  RLF    0E,W
00F0:  ANDLW  7F
00F1:  BTFSC  03.2
00F2:  GOTO   10E
00F3:  BCF    03.6
00F4:  MOVWF  4D
00F5:  BSF    03.6
00F6:  MOVF   0D,W
00F7:  BCF    03.6
00F8:  MOVWF  4E
00F9:  BSF    03.6
00FA:  MOVF   0F,W
00FB:  BCF    03.6
00FC:  MOVWF  4F
00FD:  MOVF   4D,W
00FE:  BTFSS  0C.4
00FF:  GOTO   0FE
0100:  MOVWF  19
0101:  MOVF   4E,W
0102:  BSF    03.6
0103:  MOVWF  0D
0104:  BCF    03.6
0105:  MOVF   4F,W
0106:  BSF    03.6
0107:  MOVWF  0F
0108:  INCF   0D,F
0109:  BTFSC  03.2
010A:  INCF   0F,F
010B:  BCF    03.6
010C:  GOTO   0B8
010D:  BSF    03.6
010E:  BCF    03.6
010F:  RETURN
*
0138:  DATA 0D,05
0139:  DATA C3,30
013A:  DATA 6D,31
013B:  DATA E9,37
013C:  DATA A0,32
013D:  DATA 6E,10
013E:  DATA D0,24
013F:  DATA 4E,10
0140:  DATA 52,21
0141:  DATA 37,10
0142:  DATA 61,10
0143:  DATA 41,26
0144:  DATA D4,27
0145:  DATA 0A,00
0146:  DATA 0D,05
0147:  DATA C3,30
0148:  DATA 6D,31
0149:  DATA E9,37
014A:  DATA A0,32
014B:  DATA 6E,10
014C:  DATA D0,24
014D:  DATA 4E,10
014E:  DATA 52,21
014F:  DATA 36,10
0150:  DATA 61,10
0151:  DATA 41,26
0152:  DATA D4,27
0153:  DATA 0A,00
0154:  DATA 0D,05
0155:  DATA C3,30
0156:  DATA 6D,31
0157:  DATA E9,37
0158:  DATA A0,32
0159:  DATA 6E,10
015A:  DATA D0,24
015B:  DATA 4E,10
015C:  DATA 52,21
015D:  DATA 35,10
015E:  DATA 61,10
015F:  DATA 41,26
0160:  DATA D4,27
0161:  DATA 0A,00
0162:  DATA 0D,05
0163:  DATA C3,30
0164:  DATA 6D,31
0165:  DATA E9,37
0166:  DATA A0,32
0167:  DATA 6E,10
0168:  DATA D0,24
0169:  DATA 4E,10
016A:  DATA 52,21
016B:  DATA 34,10
016C:  DATA 61,10
016D:  DATA 41,26
016E:  DATA D4,27
016F:  DATA 0A,00
0170:  DATA C4,32
0171:  DATA 73,31
0172:  DATA 6F,39
0173:  DATA E4,30
0174:  DATA ED,34
0175:  DATA 65,37
0176:  DATA F4,37
0177:  DATA 00,00
*
02F2:  MOVF   0B,W
02F3:  MOVWF  3B
02F4:  BCF    0B.7
02F5:  BSF    03.5
02F6:  BSF    03.6
02F7:  BSF    0C.7
02F8:  BSF    0C.0
02F9:  NOP
02FA:  NOP
02FB:  BCF    03.5
02FC:  BCF    03.6
02FD:  BTFSC  3B.7
02FE:  BSF    0B.7
02FF:  BSF    03.6
0300:  MOVF   0C,W
0301:  ANDLW  7F
0302:  BTFSC  03.2
0303:  GOTO   346
0304:  BCF    03.6
0305:  MOVWF  3B
0306:  BSF    03.6
0307:  MOVF   0D,W
0308:  BCF    03.6
0309:  MOVWF  3C
030A:  BSF    03.6
030B:  MOVF   0F,W
030C:  BCF    03.6
030D:  MOVWF  3D
030E:  MOVF   3B,W
030F:  MOVWF  3E
0310:  CALL   2CD
0311:  MOVF   3C,W
0312:  BSF    03.6
0313:  MOVWF  0D
0314:  BCF    03.6
0315:  MOVF   3D,W
0316:  BSF    03.6
0317:  MOVWF  0F
0318:  BCF    03.6
0319:  MOVF   0B,W
031A:  MOVWF  3E
031B:  BCF    0B.7
031C:  BSF    03.5
031D:  BSF    03.6
031E:  BSF    0C.7
031F:  BSF    0C.0
0320:  NOP
0321:  NOP
0322:  BCF    03.5
0323:  BCF    03.6
0324:  BTFSC  3E.7
0325:  BSF    0B.7
0326:  BSF    03.6
0327:  RLF    0C,W
0328:  RLF    0E,W
0329:  ANDLW  7F
032A:  BTFSC  03.2
032B:  GOTO   346
032C:  BCF    03.6
032D:  MOVWF  3B
032E:  BSF    03.6
032F:  MOVF   0D,W
0330:  BCF    03.6
0331:  MOVWF  3C
0332:  BSF    03.6
0333:  MOVF   0F,W
0334:  BCF    03.6
0335:  MOVWF  3D
0336:  MOVF   3B,W
0337:  MOVWF  3E
0338:  CALL   2CD
0339:  MOVF   3C,W
033A:  BSF    03.6
033B:  MOVWF  0D
033C:  BCF    03.6
033D:  MOVF   3D,W
033E:  BSF    03.6
033F:  MOVWF  0F
0340:  INCF   0D,F
0341:  BTFSC  03.2
0342:  INCF   0F,F
0343:  BCF    03.6
0344:  GOTO   2F2
0345:  BSF    03.6
0346:  BCF    03.6
0347:  BCF    0A.3
0348:  BCF    0A.4
0349:  GOTO   3C5 (RETURN)
034A:  MOVF   3E,W
034B:  CLRF   78
034C:  SUBWF  3D,W
034D:  BTFSC  03.0
034E:  GOTO   352
034F:  MOVF   3D,W
0350:  MOVWF  77
0351:  GOTO   35E
0352:  CLRF   77
0353:  MOVLW  08
0354:  MOVWF  3F
0355:  RLF    3D,F
0356:  RLF    77,F
0357:  MOVF   3E,W
0358:  SUBWF  77,W
0359:  BTFSC  03.0
035A:  MOVWF  77
035B:  RLF    78,F
035C:  DECFSZ 3F,F
035D:  GOTO   355
035E:  RETURN
.................... 
.................... #list
.................... 
.................... //Se configuran los fusibles
.................... // -HS -> configuración  del oscilador la cual indica High speed es decir
.................... //        frecuencias altas esto es a partir de 8 Mhz.
.................... // -NOWDT -> Se deshabilita el Watch Dog Timer.
.................... // -NOPROTECT -> Se deshabilita la proteccion de memoria en el programa.
.................... #fuses HS,NOWDT,NOPROTECT
.................... //Se indica el cristal con el que se trabajará, en este caso con aquel que tiene una frecuencia de 20 MHz
.................... #use delay(clock=20000000)
*
0083:  MOVLW  4E
0084:  MOVWF  04
0085:  BCF    03.7
0086:  MOVF   00,W
0087:  BTFSC  03.2
0088:  GOTO   096
0089:  MOVLW  06
008A:  MOVWF  78
008B:  CLRF   77
008C:  DECFSZ 77,F
008D:  GOTO   08C
008E:  DECFSZ 78,F
008F:  GOTO   08B
0090:  MOVLW  7B
0091:  MOVWF  77
0092:  DECFSZ 77,F
0093:  GOTO   092
0094:  DECFSZ 00,F
0095:  GOTO   089
0096:  RETURN
.................... //Se configura el modo maestro
.................... // -MAESTRO
.................... // -SDA        : Se configura el puerto C4 como linea de datos bidireccional
.................... // -SCL        : Se configura el puerto C3 como linea de sincronizacion o señal de reloj
.................... // -SLOW       : Se indica que trabaje a una velocidad baja
.................... // -NOFORCE_SW : No se forza software, sino hardware
.................... #use i2c(MASTER, SDA=PIN_C4, SCL=PIN_C3,SLOW, NOFORCE_SW)
*
0073:  BCF    14.7
0074:  BCF    0C.3
0075:  MOVF   4F,W
0076:  MOVWF  13
0077:  MOVLW  02
0078:  BTFSC  14.7
0079:  GOTO   081
007A:  BTFSS  0C.3
007B:  GOTO   07A
007C:  MOVLW  00
007D:  BSF    03.5
007E:  BTFSC  11.6
007F:  MOVLW  01
0080:  BCF    03.5
0081:  MOVWF  78
0082:  RETURN
.................... #include "i2c_LCD.c"
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns 
.................... //                using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.1 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD display 
.................... //     \n Set write position on next lcd line 
.................... //     \b LCD backspace 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from 
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C. 
.................... //              The tests of these routines have been programmed using the IC 
.................... //              Phillips PCF8574T. I've used 4 bits mode programming. 
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T. 
.................... //              RW Pin is not being used. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW    (Not used!) 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module 
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4 
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20   
.................... 
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
.................... 
.................... #define addr_row_one          0x00        //LCD RAM address for row 1 
.................... #define addr_row_two          0x40        //LCD RAM address for row 2 
.................... #define addr_row_three        0x14        //LCD RAM address for row 3 
.................... #define addr_row_four         0x54        //LCD RAM address for row 4 
.................... 
.................... #define ON                    1 
.................... #define OFF                   0 
.................... #define NOT                   ~ 
.................... #define data_shifted          data<<4 
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT; 
.................... 
.................... void lcd_backlight_led(byte bl) 
.................... {  
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF; 
.................... } 
.................... 
.................... void i2c_send_nibble(byte data, byte type) 
.................... {    
....................    switch (type) 
*
0178:  MOVF   4A,W
0179:  XORLW  00
017A:  BTFSC  03.2
017B:  GOTO   180
017C:  XORLW  01
017D:  BTFSC  03.2
017E:  GOTO   1B8
017F:  GOTO   1F1
....................    {      
....................       case 0 :      
....................       i2c_write(data_shifted | BACKLIGHT_LED); 
0180:  SWAPF  49,W
0181:  MOVWF  77
0182:  MOVLW  F0
0183:  ANDWF  77,F
0184:  MOVF   77,W
0185:  IORWF  31,W
0186:  MOVWF  4B
0187:  CLRF   2B
0188:  BTFSC  0B.7
0189:  BSF    2B.7
018A:  BCF    0B.7
018B:  MOVF   4B,W
018C:  MOVWF  4F
018D:  CALL   073
018E:  BTFSC  2B.7
018F:  BSF    0B.7
....................       delay_cycles(1); 
0190:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED ); 
0191:  SWAPF  49,W
0192:  MOVWF  77
0193:  MOVLW  F0
0194:  ANDWF  77,F
0195:  MOVF   77,W
0196:  IORLW  04
0197:  IORWF  31,W
0198:  MOVWF  4B
0199:  CLRF   2B
019A:  BTFSC  0B.7
019B:  BSF    2B.7
019C:  BCF    0B.7
019D:  MOVF   4B,W
019E:  MOVWF  4F
019F:  CALL   073
01A0:  BTFSC  2B.7
01A1:  BSF    0B.7
....................       delay_us(2); 
01A2:  MOVLW  03
01A3:  MOVWF  77
01A4:  DECFSZ 77,F
01A5:  GOTO   1A4
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED); 
01A6:  SWAPF  49,W
01A7:  MOVWF  77
01A8:  MOVLW  F0
01A9:  ANDWF  77,F
01AA:  MOVF   77,W
01AB:  ANDLW  FB
01AC:  IORWF  31,W
01AD:  MOVWF  4B
01AE:  CLRF   2B
01AF:  BTFSC  0B.7
01B0:  BSF    2B.7
01B1:  BCF    0B.7
01B2:  MOVF   4B,W
01B3:  MOVWF  4F
01B4:  CALL   073
01B5:  BTFSC  2B.7
01B6:  BSF    0B.7
....................       break; 
01B7:  GOTO   1F1
....................       
....................       case 1 : 
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
01B8:  SWAPF  49,W
01B9:  MOVWF  77
01BA:  MOVLW  F0
01BB:  ANDWF  77,F
01BC:  MOVF   77,W
01BD:  IORLW  01
01BE:  IORWF  31,W
01BF:  MOVWF  4B
01C0:  CLRF   2B
01C1:  BTFSC  0B.7
01C2:  BSF    2B.7
01C3:  BCF    0B.7
01C4:  MOVF   4B,W
01C5:  MOVWF  4F
01C6:  CALL   073
01C7:  BTFSC  2B.7
01C8:  BSF    0B.7
....................       delay_cycles(1); 
01C9:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED ); 
01CA:  SWAPF  49,W
01CB:  MOVWF  77
01CC:  MOVLW  F0
01CD:  ANDWF  77,F
01CE:  MOVF   77,W
01CF:  IORLW  01
01D0:  IORLW  04
01D1:  IORWF  31,W
01D2:  MOVWF  4B
01D3:  CLRF   2B
01D4:  BTFSC  0B.7
01D5:  BSF    2B.7
01D6:  BCF    0B.7
01D7:  MOVF   4B,W
01D8:  MOVWF  4F
01D9:  CALL   073
01DA:  BTFSC  2B.7
01DB:  BSF    0B.7
....................       delay_us(2); 
01DC:  MOVLW  03
01DD:  MOVWF  77
01DE:  DECFSZ 77,F
01DF:  GOTO   1DE
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
01E0:  SWAPF  49,W
01E1:  MOVWF  77
01E2:  MOVLW  F0
01E3:  ANDWF  77,F
01E4:  MOVF   77,W
01E5:  IORLW  01
01E6:  IORWF  31,W
01E7:  MOVWF  4B
01E8:  CLRF   2B
01E9:  BTFSC  0B.7
01EA:  BSF    2B.7
01EB:  BCF    0B.7
01EC:  MOVF   4B,W
01ED:  MOVWF  4F
01EE:  CALL   073
01EF:  BTFSC  2B.7
01F0:  BSF    0B.7
....................       break; 
....................    } 
01F1:  RETURN
.................... } 
....................     
.................... void lcd_send_byte(byte data, byte type) 
....................    { 
....................         i2c_start(); 
01F2:  BSF    03.5
01F3:  BSF    11.0
01F4:  BTFSC  11.0
01F5:  GOTO   1F4
01F6:  BCF    03.5
01F7:  CLRF   2B
01F8:  BTFSC  0B.7
01F9:  BSF    2B.7
01FA:  BCF    0B.7
....................         i2c_write(LCD_ADDR); 
01FB:  MOVF   2D,W
01FC:  MOVWF  4F
01FD:  CALL   073
01FE:  BTFSC  2B.7
01FF:  BSF    0B.7
....................         i2c_send_nibble(data >> 4 , type); 
0200:  SWAPF  46,W
0201:  MOVWF  48
0202:  MOVLW  0F
0203:  ANDWF  48,F
0204:  MOVF   48,W
0205:  MOVWF  49
0206:  MOVF   47,W
0207:  MOVWF  4A
0208:  CALL   178
....................         i2c_send_nibble(data & 0xf , type); 
0209:  MOVF   46,W
020A:  ANDLW  0F
020B:  MOVWF  48
020C:  MOVWF  49
020D:  MOVF   47,W
020E:  MOVWF  4A
020F:  CALL   178
....................         i2c_stop();        
0210:  BSF    03.5
0211:  BSF    11.2
0212:  BTFSC  11.2
0213:  GOTO   212
0214:  BCF    03.5
0215:  RETURN
....................    } 
.................... 
.................... void lcd_clear() 
.................... {  
....................         lcd_send_byte(0x01,0); 
0216:  MOVLW  01
0217:  MOVWF  46
0218:  CLRF   47
0219:  CALL   1F2
021A:  CLRF   2B
021B:  BTFSC  0B.7
021C:  BSF    2B.7
021D:  BCF    0B.7
....................         delay_ms(2); 
021E:  MOVLW  02
021F:  MOVWF  4E
0220:  CALL   083
0221:  BTFSC  2B.7
0222:  BSF    0B.7
....................         new_row_request=1; 
0223:  MOVLW  01
0224:  MOVWF  30
0225:  RETURN
.................... } 
.................... 
.................... void lcd_init(byte ADDR, byte col, byte row) 
.................... { 
....................    byte i;
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines 
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up.
....................    
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module 
0226:  MOVF   3B,W
0227:  MOVWF  2D
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4 
0228:  MOVF   3D,W
0229:  MOVWF  2E
....................    lcd_total_columns= col ;
022A:  MOVF   3C,W
022B:  MOVWF  2F
....................    disable_interrupts(GLOBAL); 
022C:  BCF    0B.6
022D:  BCF    0B.7
022E:  BTFSC  0B.7
022F:  GOTO   22D
0230:  CLRF   2B
0231:  BTFSC  0B.7
0232:  BSF    2B.7
0233:  BCF    0B.7
....................    delay_ms(50); //LCD power up delay 
0234:  MOVLW  32
0235:  MOVWF  4E
0236:  CALL   083
0237:  BTFSC  2B.7
0238:  BSF    0B.7
....................     
....................    i2c_start(); 
0239:  BSF    03.5
023A:  BSF    11.0
023B:  BTFSC  11.0
023C:  GOTO   23B
023D:  BCF    03.5
023E:  CLRF   2B
023F:  BTFSC  0B.7
0240:  BSF    2B.7
0241:  BCF    0B.7
....................    i2c_write(LCD_ADDR); 
0242:  MOVF   2D,W
0243:  MOVWF  4F
0244:  CALL   073
0245:  BTFSC  2B.7
0246:  BSF    0B.7
....................       i2c_send_nibble(0x00,0); 
0247:  CLRF   49
0248:  CLRF   4A
0249:  CALL   178
024A:  CLRF   2B
024B:  BTFSC  0B.7
024C:  BSF    2B.7
024D:  BCF    0B.7
....................       delay_ms(15); 
024E:  MOVLW  0F
024F:  MOVWF  4E
0250:  CALL   083
0251:  BTFSC  2B.7
0252:  BSF    0B.7
....................     
....................    for (i=1;i<=3;++i)    
0253:  MOVLW  01
0254:  MOVWF  3E
0255:  MOVF   3E,W
0256:  SUBLW  03
0257:  BTFSS  03.0
0258:  GOTO   268
....................    { 
....................       i2c_send_nibble(0x03,0); 
0259:  MOVLW  03
025A:  MOVWF  49
025B:  CLRF   4A
025C:  CALL   178
025D:  CLRF   2B
025E:  BTFSC  0B.7
025F:  BSF    2B.7
0260:  BCF    0B.7
....................       delay_ms(5); 
0261:  MOVLW  05
0262:  MOVWF  4E
0263:  CALL   083
0264:  BTFSC  2B.7
0265:  BSF    0B.7
0266:  INCF   3E,F
0267:  GOTO   255
....................    }    
....................       i2c_send_nibble(0x02,0); 
0268:  MOVLW  02
0269:  MOVWF  49
026A:  CLRF   4A
026B:  CALL   178
026C:  CLRF   2B
026D:  BTFSC  0B.7
026E:  BSF    2B.7
026F:  BCF    0B.7
....................       delay_ms(5); 
0270:  MOVLW  05
0271:  MOVWF  4E
0272:  CALL   083
0273:  BTFSC  2B.7
0274:  BSF    0B.7
....................    i2c_stop(); 
0275:  BSF    03.5
0276:  BSF    11.2
0277:  BTFSC  11.2
0278:  GOTO   277
....................     
....................    for (i=0;i<=3;++i) { 
0279:  BCF    03.5
027A:  CLRF   3E
027B:  MOVF   3E,W
027C:  SUBLW  03
027D:  BTFSS  03.0
027E:  GOTO   290
....................    lcd_send_byte(LCD_INIT_STRING[i],0); 
027F:  MOVF   3E,W
0280:  CALL   05D
0281:  MOVWF  3F
0282:  MOVWF  46
0283:  CLRF   47
0284:  CALL   1F2
0285:  CLRF   2B
0286:  BTFSC  0B.7
0287:  BSF    2B.7
0288:  BCF    0B.7
....................    delay_ms(5); 
0289:  MOVLW  05
028A:  MOVWF  4E
028B:  CALL   083
028C:  BTFSC  2B.7
028D:  BSF    0B.7
028E:  INCF   3E,F
028F:  GOTO   27B
....................    } 
....................    lcd_clear();  //Clear Display 
0290:  CALL   216
....................    enable_interrupts(GLOBAL); 
0291:  MOVLW  C0
0292:  IORWF  0B,F
0293:  BCF    0A.3
0294:  BCF    0A.4
0295:  GOTO   3BA (RETURN)
.................... } 
.................... 
.................... void lcd_gotoxy( byte x, byte y) 
.................... { 
.................... byte row,column,row_addr,lcd_address; 
.................... static char data; 
*
03B1:  BCF    03.5
03B2:  CLRF   32
.................... 
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y; 
*
0296:  MOVF   40,W
0297:  SUBWF  2E,W
0298:  BTFSC  03.0
0299:  GOTO   29D
029A:  MOVF   2E,W
029B:  MOVWF  41
029C:  GOTO   29F
029D:  MOVF   40,W
029E:  MOVWF  41
....................   
....................    switch(row) 
029F:  MOVF   41,W
02A0:  XORLW  01
02A1:  BTFSC  03.2
02A2:  GOTO   2AD
02A3:  XORLW  03
02A4:  BTFSC  03.2
02A5:  GOTO   2AF
02A6:  XORLW  01
02A7:  BTFSC  03.2
02A8:  GOTO   2B2
02A9:  XORLW  07
02AA:  BTFSC  03.2
02AB:  GOTO   2B5
02AC:  GOTO   2B8
....................    { 
....................       case 1:  row_addr=addr_row_one;     break; 
02AD:  CLRF   43
02AE:  GOTO   2B9
....................       case 2:  row_addr=addr_row_two;     break; 
02AF:  MOVLW  40
02B0:  MOVWF  43
02B1:  GOTO   2B9
....................       case 3:  row_addr=addr_row_three;   break; 
02B2:  MOVLW  14
02B3:  MOVWF  43
02B4:  GOTO   2B9
....................       case 4:  row_addr=addr_row_four;    break; 
02B5:  MOVLW  54
02B6:  MOVWF  43
02B7:  GOTO   2B9
....................       default: row_addr=addr_row_one;     break;  
02B8:  CLRF   43
....................    }  
....................     
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;  
02B9:  MOVF   3F,W
02BA:  SUBWF  2F,W
02BB:  BTFSC  03.0
02BC:  GOTO   2C0
02BD:  MOVF   2F,W
02BE:  MOVWF  42
02BF:  GOTO   2C2
02C0:  MOVF   3F,W
02C1:  MOVWF  42
....................    lcd_address=(row_addr+(column-1)); 
02C2:  MOVLW  01
02C3:  SUBWF  42,W
02C4:  ADDWF  43,W
02C5:  MOVWF  44
....................    lcd_send_byte(0x80|lcd_address,0); 
02C6:  MOVF   44,W
02C7:  IORLW  80
02C8:  MOVWF  45
02C9:  MOVWF  46
02CA:  CLRF   47
02CB:  CALL   1F2
02CC:  RETURN
.................... } 
.................... 
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... {    
....................   switch(in_data) 
02CD:  MOVF   3E,W
02CE:  XORLW  0C
02CF:  BTFSC  03.2
02D0:  GOTO   2D8
02D1:  XORLW  06
02D2:  BTFSC  03.2
02D3:  GOTO   2DA
02D4:  XORLW  02
02D5:  BTFSC  03.2
02D6:  GOTO   2E7
02D7:  GOTO   2EC
....................    {  
....................      case '\f': lcd_clear();                       break;                
02D8:  CALL   216
02D9:  GOTO   2F1
....................       
....................      case '\n': 
....................      new_row_request++; 
02DA:  INCF   30,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1; 
02DB:  MOVF   30,W
02DC:  SUBWF  2E,W
02DD:  BTFSC  03.0
02DE:  GOTO   2E1
02DF:  MOVLW  01
02E0:  MOVWF  30
....................      lcd_gotoxy(1, new_row_request); 
02E1:  MOVLW  01
02E2:  MOVWF  3F
02E3:  MOVF   30,W
02E4:  MOVWF  40
02E5:  CALL   296
....................      break; 
02E6:  GOTO   2F1
....................                   
....................      case '\b': lcd_send_byte(0x10,0);             break; 
02E7:  MOVLW  10
02E8:  MOVWF  46
02E9:  CLRF   47
02EA:  CALL   1F2
02EB:  GOTO   2F1
....................         
....................      default: lcd_send_byte(in_data,1);            break;      
02EC:  MOVF   3E,W
02ED:  MOVWF  46
02EE:  MOVLW  01
02EF:  MOVWF  47
02F0:  CALL   1F2
....................       
....................    } 
02F1:  RETURN
.................... } 
.................... 
.................... //Configuracion de la comunicacion asincrona
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)
.................... 
.................... int vecesPresionada = 0, contador = 0, veces, seg,desborde=0;
.................... 
.................... //Funcion para la comunicacion i2c
.................... void escribir_i2c(int direccion, int valor){
....................    i2c_start();         //Inicia la comunicacion I2C, enviando el bit S
*
009D:  BSF    03.5
009E:  BSF    11.0
009F:  BTFSC  11.0
00A0:  GOTO   09F
....................    i2c_write(direccion);//Se indica la direccion del dispositivo
00A1:  BCF    03.5
00A2:  MOVF   4D,W
00A3:  MOVWF  4F
00A4:  CALL   073
....................    i2c_write(valor);    //Se indica el dato que se le pasara a dicha direccion
00A5:  MOVF   4E,W
00A6:  MOVWF  4F
00A7:  CALL   073
....................    i2c_stop();          //Finaliza la comunicacion, envia el bit de paro
00A8:  BSF    03.5
00A9:  BSF    11.2
00AA:  BTFSC  11.2
00AB:  GOTO   0AA
.................... }
.................... 
.................... #int_rtcc
.................... void clock_isr(){
....................    veces--;          //Se decrementa la variable veces
*
0065:  DECF   35,F
....................    SET_RTCC(232);    //Se carga el timer con 238
0066:  MOVLW  E8
0067:  MOVWF  01
....................    if(veces==0){      //Pregunta si VECES ya llego a cero
0068:  MOVF   35,F
0069:  BTFSS  03.2
006A:  GOTO   06F
....................       seg++;         //Cuando VECES llega a cero incrementa SEG (Transcurrio 1 seg)
006B:  INCF   36,F
....................       veces=150;//Vuelvo y cargo VECES con el valor 217
006C:  MOVLW  96
006D:  MOVWF  35
....................       desborde ++;
006E:  INCF   37,F
....................    }
....................   // lcd_gotoxy(1,2);                               //Se indica la columna y la fila donde aparecera el mensaje
....................    //printf(LCD_PUTC, "%d",);//Se imprime en el display de LCD el mensaje leido
....................    
.................... }
.................... 
.................... /*Funcion que produce una interrupcion al apretar el boton mostrando las veces que ha 
.................... sido presionado dicho dispositivo*/
006F:  BCF    0B.2
0070:  BCF    0A.3
0071:  BCF    0A.4
0072:  GOTO   033
.................... #int_EXT
.................... void ext_int(){
....................    vecesPresionada += 1;
*
0097:  MOVLW  01
0098:  ADDWF  33,F
....................    escribir_i2c(0x42,vecesPresionada);
0099:  MOVLW  42
009A:  MOVWF  4D
009B:  MOVF   33,W
009C:  MOVWF  4E
....................    
....................    delay_ms(500);                                 //Se genera un retardo de 500 ms = 0.5 s
*
00AC:  MOVLW  02
00AD:  BCF    03.5
00AE:  MOVWF  4D
00AF:  MOVLW  FA
00B0:  MOVWF  4E
00B1:  CALL   083
00B2:  DECFSZ 4D,F
00B3:  GOTO   0AF
.................... }
.................... 
.................... /*Funcion que produce una interrupcion para mandar un mensaje a terminal
.................... cada que RB7, RB6, RB5 o RB4 tengan algun cambio de bajo a alto*/
00B4:  BCF    0B.1
00B5:  BCF    0A.3
00B6:  BCF    0A.4
00B7:  GOTO   033
.................... #int_RB
.................... void port_rb(){
....................    if (input_state(PIN_B7)) printf("\r\nCambio en PIN RB7 a ALTO\n");
*
0110:  BTFSS  06.7
0111:  GOTO   119
0112:  MOVLW  38
0113:  BSF    03.6
0114:  MOVWF  0D
0115:  MOVLW  01
0116:  MOVWF  0F
0117:  BCF    03.6
0118:  CALL   0B8
....................    if (input_state(PIN_B6)) printf("\r\nCambio en PIN RB6 a ALTO\n");
0119:  BTFSS  06.6
011A:  GOTO   122
011B:  MOVLW  46
011C:  BSF    03.6
011D:  MOVWF  0D
011E:  MOVLW  01
011F:  MOVWF  0F
0120:  BCF    03.6
0121:  CALL   0B8
....................    if (input_state(PIN_B5)) printf("\r\nCambio en PIN RB5 a ALTO\n");
0122:  BTFSS  06.5
0123:  GOTO   12B
0124:  MOVLW  54
0125:  BSF    03.6
0126:  MOVWF  0D
0127:  MOVLW  01
0128:  MOVWF  0F
0129:  BCF    03.6
012A:  CALL   0B8
....................    if (input_state(PIN_B4)) printf("\r\nCambio en PIN RB4 a ALTO\n");
012B:  BTFSS  06.4
012C:  GOTO   134
012D:  MOVLW  62
012E:  BSF    03.6
012F:  MOVWF  0D
0130:  MOVLW  01
0131:  MOVWF  0F
0132:  BCF    03.6
0133:  CALL   0B8
0134:  BCF    0B.0
0135:  BCF    0A.3
0136:  BCF    0A.4
0137:  GOTO   033
.................... }
.................... 
.................... /*Funcion que permite mostrar el contador de 0 a 20 y de 20 a 0 en los display de 7 segmentos*/
.................... void mostrarContador(){
*
035F:  MOVF   34,W
0360:  MOVWF  3D
0361:  MOVLW  0A
0362:  MOVWF  3E
0363:  CALL   34A
0364:  MOVF   78,W
0365:  MOVWF  3B
0366:  MOVF   34,W
0367:  MOVWF  3D
0368:  MOVLW  0A
0369:  MOVWF  3E
036A:  CALL   34A
036B:  MOVF   77,W
036C:  MOVWF  3C
....................    int decenas = contador/10;
....................    int unidades = contador%10;
....................    
....................    output_d(decenas<<4|unidades);
036D:  SWAPF  3B,W
036E:  MOVWF  77
036F:  MOVLW  F0
0370:  ANDWF  77,F
0371:  MOVF   77,W
0372:  IORWF  3C,W
0373:  MOVWF  3D
0374:  BSF    03.5
0375:  CLRF   08
0376:  BCF    03.5
0377:  MOVF   3D,W
0378:  MOVWF  08
0379:  CLRF   2B
037A:  BTFSC  0B.7
037B:  BSF    2B.7
037C:  BCF    0B.7
....................    delay_ms(250);
037D:  MOVLW  FA
037E:  MOVWF  4E
037F:  CALL   083
0380:  BTFSC  2B.7
0381:  BSF    0B.7
0382:  RETURN
.................... }
.................... 
.................... //Funcion principal
.................... void main() {   
0383:  MOVF   03,W
0384:  ANDLW  1F
0385:  MOVWF  03
0386:  MOVLW  FF
0387:  MOVWF  2C
0388:  BSF    2C.3
0389:  MOVF   2C,W
038A:  BSF    03.5
038B:  MOVWF  07
038C:  BCF    03.5
038D:  BSF    2C.4
038E:  MOVF   2C,W
038F:  BSF    03.5
0390:  MOVWF  07
0391:  MOVLW  31
0392:  MOVWF  13
0393:  MOVLW  28
0394:  BCF    03.5
0395:  MOVWF  14
0396:  BSF    03.5
0397:  BSF    14.7
0398:  BCF    14.6
0399:  MOVLW  01
039A:  BCF    03.5
039B:  MOVWF  30
039C:  MOVLW  08
039D:  MOVWF  31
039E:  MOVLW  81
039F:  BSF    03.5
03A0:  MOVWF  19
03A1:  MOVLW  A6
03A2:  MOVWF  18
03A3:  MOVLW  90
03A4:  BCF    03.5
03A5:  MOVWF  18
03A6:  CLRF   33
03A7:  CLRF   34
03A8:  CLRF   37
03A9:  CLRF   39
03AA:  CLRF   38
03AB:  BSF    03.5
03AC:  BSF    1F.0
03AD:  BSF    1F.1
03AE:  BSF    1F.2
03AF:  BCF    1F.3
03B0:  BCF    03.7
....................    lcd_init(0x4E,16,2);     //Se inicializa el display con la dirección de escritura
*
03B3:  MOVLW  4E
03B4:  MOVWF  3B
03B5:  MOVLW  10
03B6:  MOVWF  3C
03B7:  MOVLW  02
03B8:  MOVWF  3D
03B9:  GOTO   226
....................    lcd_gotoxy(1,1);         //Se indica la columna y la fila donde aparecera el mensaje
03BA:  MOVLW  01
03BB:  MOVWF  3F
03BC:  MOVWF  40
03BD:  CALL   296
....................    printf(LCD_PUTC, "Desbordamiento");
03BE:  MOVLW  70
03BF:  BSF    03.6
03C0:  MOVWF  0D
03C1:  MOVLW  01
03C2:  MOVWF  0F
03C3:  BCF    03.6
03C4:  GOTO   2F2
....................       
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256 | RTCC_8_bit);
03C5:  BSF    03.5
03C6:  MOVF   01,W
03C7:  ANDLW  C0
03C8:  IORLW  07
03C9:  MOVWF  01
....................    ext_int_edge(L_TO_H);
03CA:  BSF    01.6
....................    enable_interrupts(INT_EXT); //Habilita interrupción por TIMER0
03CB:  BCF    03.5
03CC:  BSF    0B.4
....................    enable_interrupts(GLOBAL);  //Habilita las interrupciones globales
03CD:  MOVLW  C0
03CE:  IORWF  0B,F
....................    enable_interrupts(INT_RB);  //Habilita la interrupcion por RB
03CF:  BSF    0B.3
....................    enable_interrupts(INT_RTCC);//Habiloita la interrupcion por RTCC
03D0:  BSF    0B.5
....................    
....................    boolean count = false;
03D1:  BCF    3A.0
....................    mostrarContador();
03D2:  CALL   35F
....................    while(true){
....................       if(seg==4){
03D3:  MOVF   36,W
03D4:  SUBLW  04
03D5:  BTFSS  03.2
03D6:  GOTO   3EE
....................          mostrarContador();
03D7:  CALL   35F
....................          //Se realiza el conteo de 0 a 20 y de 20 a 0 de forma indefinida
....................          if(contador <= 20 && count == false){
03D8:  MOVF   34,W
03D9:  SUBLW  14
03DA:  BTFSS  03.0
03DB:  GOTO   3E4
03DC:  BTFSC  3A.0
03DD:  GOTO   3E4
....................             contador++;
03DE:  INCF   34,F
....................             if(contador == 20) count = true;
03DF:  MOVF   34,W
03E0:  SUBLW  14
03E1:  BTFSC  03.2
03E2:  BSF    3A.0
....................          }else if(contador <= 20 && count == true){
03E3:  GOTO   3ED
03E4:  MOVF   34,W
03E5:  SUBLW  14
03E6:  BTFSS  03.0
03E7:  GOTO   3ED
03E8:  BTFSS  3A.0
03E9:  GOTO   3ED
....................             contador--;
03EA:  DECFSZ 34,F
....................             if(contador == 0) count = false;
03EB:  GOTO   3ED
03EC:  BCF    3A.0
....................          }
....................          seg = 0;
03ED:  CLRF   36
....................       }
03EE:  GOTO   3D3
....................    }
.................... }
03EF:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

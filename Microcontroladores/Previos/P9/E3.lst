CCS PCM C Compiler, Version 5.093, 4770               19-may.-23 09:47

               Filename:   D:\Escuela\Semestre 23-2\LabMicros\Previos\P9\E3.lst

               ROM used:   657 words (8%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           36 (10%) worst case
               Stack used: 6 locations
               Stack size: 8

0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   240
0003:  NOP
.................... #include <16F877.h> // biblioteca del microprocesador
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 55,27
000D:  DATA C1,26
000E:  DATA 0A,00
000F:  DATA C3,37
0010:  DATA 6E,3A
0011:  DATA 61,32
0012:  DATA 6F,39
0013:  DATA 3D,00
*
0158:  MOVF   0B,W
0159:  MOVWF  2A
015A:  BCF    0B.7
015B:  BSF    03.5
015C:  BSF    03.6
015D:  BSF    0C.7
015E:  BSF    0C.0
015F:  NOP
0160:  NOP
0161:  BCF    03.5
0162:  BCF    03.6
0163:  BTFSC  2A.7
0164:  BSF    0B.7
0165:  BSF    03.6
0166:  MOVF   0C,W
0167:  ANDLW  7F
0168:  BTFSC  03.2
0169:  GOTO   1AC
016A:  BCF    03.6
016B:  MOVWF  2A
016C:  BSF    03.6
016D:  MOVF   0D,W
016E:  BCF    03.6
016F:  MOVWF  2B
0170:  BSF    03.6
0171:  MOVF   0F,W
0172:  BCF    03.6
0173:  MOVWF  2C
0174:  MOVF   2A,W
0175:  MOVWF  30
0176:  CALL   133
0177:  MOVF   2B,W
0178:  BSF    03.6
0179:  MOVWF  0D
017A:  BCF    03.6
017B:  MOVF   2C,W
017C:  BSF    03.6
017D:  MOVWF  0F
017E:  BCF    03.6
017F:  MOVF   0B,W
0180:  MOVWF  2D
0181:  BCF    0B.7
0182:  BSF    03.5
0183:  BSF    03.6
0184:  BSF    0C.7
0185:  BSF    0C.0
0186:  NOP
0187:  NOP
0188:  BCF    03.5
0189:  BCF    03.6
018A:  BTFSC  2D.7
018B:  BSF    0B.7
018C:  BSF    03.6
018D:  RLF    0C,W
018E:  RLF    0E,W
018F:  ANDLW  7F
0190:  BTFSC  03.2
0191:  GOTO   1AC
0192:  BCF    03.6
0193:  MOVWF  2A
0194:  BSF    03.6
0195:  MOVF   0D,W
0196:  BCF    03.6
0197:  MOVWF  2B
0198:  BSF    03.6
0199:  MOVF   0F,W
019A:  BCF    03.6
019B:  MOVWF  2C
019C:  MOVF   2A,W
019D:  MOVWF  30
019E:  CALL   133
019F:  MOVF   2B,W
01A0:  BSF    03.6
01A1:  MOVWF  0D
01A2:  BCF    03.6
01A3:  MOVF   2C,W
01A4:  BSF    03.6
01A5:  MOVWF  0F
01A6:  INCF   0D,F
01A7:  BTFSC  03.2
01A8:  INCF   0F,F
01A9:  BCF    03.6
01AA:  GOTO   158
01AB:  BSF    03.6
01AC:  BCF    03.6
01AD:  RETURN
*
01C9:  MOVF   31,W
01CA:  CLRF   78
01CB:  SUBWF  30,W
01CC:  BTFSC  03.0
01CD:  GOTO   1D1
01CE:  MOVF   30,W
01CF:  MOVWF  77
01D0:  GOTO   1DD
01D1:  CLRF   77
01D2:  MOVLW  08
01D3:  MOVWF  32
01D4:  RLF    30,F
01D5:  RLF    77,F
01D6:  MOVF   31,W
01D7:  SUBWF  77,W
01D8:  BTFSC  03.0
01D9:  MOVWF  77
01DA:  RLF    78,F
01DB:  DECFSZ 32,F
01DC:  GOTO   1D4
01DD:  RETURN
*
01E7:  MOVLW  20
01E8:  BTFSS  2B.4
01E9:  MOVLW  30
01EA:  MOVWF  2C
01EB:  MOVF   2A,W
01EC:  MOVWF  77
01ED:  BTFSS  2A.7
01EE:  GOTO   1F7
01EF:  COMF   77,F
01F0:  INCF   77,F
01F1:  MOVF   77,W
01F2:  MOVWF  2A
01F3:  MOVLW  2D
01F4:  MOVWF  2C
01F5:  BSF    2B.7
01F6:  BSF    2B.0
01F7:  MOVF   2A,W
01F8:  MOVWF  30
01F9:  MOVLW  64
01FA:  MOVWF  31
01FB:  CALL   1C9
01FC:  MOVF   77,W
01FD:  MOVWF  2A
01FE:  MOVLW  30
01FF:  ADDWF  78,W
0200:  MOVWF  2D
0201:  MOVF   2A,W
0202:  MOVWF  30
0203:  MOVLW  0A
0204:  MOVWF  31
0205:  CALL   1C9
0206:  MOVLW  30
0207:  ADDWF  77,W
0208:  MOVWF  2F
0209:  MOVLW  30
020A:  ADDWF  78,W
020B:  MOVWF  2E
020C:  MOVF   2C,W
020D:  MOVWF  77
020E:  MOVLW  30
020F:  SUBWF  2D,W
0210:  BTFSC  03.2
0211:  GOTO   216
0212:  BSF    2B.1
0213:  BTFSC  2B.7
0214:  BSF    2B.2
0215:  GOTO   22A
0216:  MOVF   2C,W
0217:  MOVWF  2D
0218:  MOVLW  20
0219:  MOVWF  2C
021A:  MOVLW  30
021B:  SUBWF  2E,W
021C:  BTFSC  03.2
021D:  GOTO   222
021E:  BSF    2B.0
021F:  BTFSC  2B.7
0220:  BSF    2B.1
0221:  GOTO   22A
0222:  BTFSS  03.2
0223:  BSF    2B.0
0224:  BTFSS  03.2
0225:  GOTO   22A
0226:  MOVF   2D,W
0227:  MOVWF  2E
0228:  MOVLW  20
0229:  MOVWF  2D
022A:  BTFSC  2B.2
022B:  GOTO   231
022C:  BTFSC  2B.1
022D:  GOTO   234
022E:  BTFSC  2B.0
022F:  GOTO   237
0230:  GOTO   23A
0231:  MOVF   2C,W
0232:  MOVWF  30
0233:  CALL   133
0234:  MOVF   2D,W
0235:  MOVWF  30
0236:  CALL   133
0237:  MOVF   2E,W
0238:  MOVWF  30
0239:  CALL   133
023A:  MOVF   2F,W
023B:  MOVWF  30
023C:  CALL   133
.................... 
.................... #list
.................... 
.................... #fuses HS,NOWDT,NOPROTECT // conexiones eléctricas
.................... #use delay(clock=20000000) // 20 MHz
*
0014:  MOVLW  31
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   027
001A:  MOVLW  06
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  7B
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 00,F
0026:  GOTO   01A
0027:  RETURN
.................... #use i2c(MASTER, SDA=PIN_C4, SCL=PIN_C3,SLOW, NOFORCE_SW) // configuración comunicación síncrona I2C
0028:  BCF    14.7
0029:  BCF    0C.3
002A:  MOVF   3E,W
002B:  MOVWF  13
002C:  MOVLW  02
002D:  BTFSC  14.7
002E:  GOTO   036
002F:  BTFSS  0C.3
0030:  GOTO   02F
0031:  MOVLW  00
0032:  BSF    03.5
0033:  BTFSC  11.6
0034:  MOVLW  01
0035:  BCF    03.5
0036:  MOVWF  78
0037:  RETURN
.................... #include <i2c_LCD.c> // biblioteca para control de display LCD.
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns 
.................... //                using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.1 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD display 
.................... //     \n Set write position on next lcd line 
.................... //     \b LCD backspace 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from 
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C. 
.................... //              The tests of these routines have been programmed using the IC 
.................... //              Phillips PCF8574T. I've used 4 bits mode programming. 
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T. 
.................... //              RW Pin is not being used. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW    (Not used!) 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module 
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4 
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20   
.................... 
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
.................... 
.................... #define addr_row_one          0x00        //LCD RAM address for row 1 
.................... #define addr_row_two          0x40        //LCD RAM address for row 2 
.................... #define addr_row_three        0x14        //LCD RAM address for row 3 
.................... #define addr_row_four         0x54        //LCD RAM address for row 4 
.................... 
.................... #define ON                    1 
.................... #define OFF                   0 
.................... #define NOT                   ~ 
.................... #define data_shifted          data<<4 
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT; 
.................... 
.................... void lcd_backlight_led(byte bl) 
.................... {  
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF; 
.................... } 
.................... 
.................... void i2c_send_nibble(byte data, byte type) 
.................... {    
....................    switch (type) 
0038:  MOVF   3C,W
0039:  XORLW  00
003A:  BTFSC  03.2
003B:  GOTO   040
003C:  XORLW  01
003D:  BTFSC  03.2
003E:  GOTO   063
003F:  GOTO   087
....................    {      
....................       case 0 :      
....................       i2c_write(data_shifted | BACKLIGHT_LED); 
0040:  SWAPF  3B,W
0041:  MOVWF  77
0042:  MOVLW  F0
0043:  ANDWF  77,F
0044:  MOVF   77,W
0045:  IORWF  25,W
0046:  MOVWF  3D
0047:  MOVWF  3E
0048:  CALL   028
....................       delay_cycles(1); 
0049:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED ); 
004A:  SWAPF  3B,W
004B:  MOVWF  77
004C:  MOVLW  F0
004D:  ANDWF  77,F
004E:  MOVF   77,W
004F:  IORLW  04
0050:  IORWF  25,W
0051:  MOVWF  3D
0052:  MOVWF  3E
0053:  CALL   028
....................       delay_us(2); 
0054:  MOVLW  03
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED); 
0058:  SWAPF  3B,W
0059:  MOVWF  77
005A:  MOVLW  F0
005B:  ANDWF  77,F
005C:  MOVF   77,W
005D:  ANDLW  FB
005E:  IORWF  25,W
005F:  MOVWF  3D
0060:  MOVWF  3E
0061:  CALL   028
....................       break; 
0062:  GOTO   087
....................       
....................       case 1 : 
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
0063:  SWAPF  3B,W
0064:  MOVWF  77
0065:  MOVLW  F0
0066:  ANDWF  77,F
0067:  MOVF   77,W
0068:  IORLW  01
0069:  IORWF  25,W
006A:  MOVWF  3D
006B:  MOVWF  3E
006C:  CALL   028
....................       delay_cycles(1); 
006D:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED ); 
006E:  SWAPF  3B,W
006F:  MOVWF  77
0070:  MOVLW  F0
0071:  ANDWF  77,F
0072:  MOVF   77,W
0073:  IORLW  01
0074:  IORLW  04
0075:  IORWF  25,W
0076:  MOVWF  3D
0077:  MOVWF  3E
0078:  CALL   028
....................       delay_us(2); 
0079:  MOVLW  03
007A:  MOVWF  77
007B:  DECFSZ 77,F
007C:  GOTO   07B
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
007D:  SWAPF  3B,W
007E:  MOVWF  77
007F:  MOVLW  F0
0080:  ANDWF  77,F
0081:  MOVF   77,W
0082:  IORLW  01
0083:  IORWF  25,W
0084:  MOVWF  3D
0085:  MOVWF  3E
0086:  CALL   028
....................       break; 
....................    } 
0087:  RETURN
.................... } 
....................     
.................... void lcd_send_byte(byte data, byte type) 
....................    { 
....................         i2c_start(); 
0088:  BSF    03.5
0089:  BSF    11.0
008A:  BTFSC  11.0
008B:  GOTO   08A
....................         i2c_write(LCD_ADDR); 
008C:  BCF    03.5
008D:  MOVF   21,W
008E:  MOVWF  3E
008F:  CALL   028
....................         i2c_send_nibble(data >> 4 , type); 
0090:  SWAPF  38,W
0091:  MOVWF  3A
0092:  MOVLW  0F
0093:  ANDWF  3A,F
0094:  MOVF   3A,W
0095:  MOVWF  3B
0096:  MOVF   39,W
0097:  MOVWF  3C
0098:  CALL   038
....................         i2c_send_nibble(data & 0xf , type); 
0099:  MOVF   38,W
009A:  ANDLW  0F
009B:  MOVWF  3A
009C:  MOVWF  3B
009D:  MOVF   39,W
009E:  MOVWF  3C
009F:  CALL   038
....................         i2c_stop();        
00A0:  BSF    03.5
00A1:  BSF    11.2
00A2:  BTFSC  11.2
00A3:  GOTO   0A2
00A4:  BCF    03.5
00A5:  RETURN
....................    } 
.................... 
.................... void lcd_clear() 
.................... {  
....................         lcd_send_byte(0x01,0); 
00A6:  MOVLW  01
00A7:  MOVWF  38
00A8:  CLRF   39
00A9:  CALL   088
....................         delay_ms(2); 
00AA:  MOVLW  02
00AB:  MOVWF  31
00AC:  CALL   014
....................         new_row_request=1; 
00AD:  MOVLW  01
00AE:  MOVWF  24
00AF:  RETURN
.................... } 
.................... 
.................... void lcd_init(byte ADDR, byte col, byte row) 
.................... { 
....................    byte i;
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines 
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up.
....................    
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module 
00B0:  MOVF   2A,W
00B1:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4 
00B2:  MOVF   2C,W
00B3:  MOVWF  22
....................    lcd_total_columns= col ;
00B4:  MOVF   2B,W
00B5:  MOVWF  23
....................    disable_interrupts(GLOBAL); 
00B6:  BCF    0B.6
00B7:  BCF    0B.7
00B8:  BTFSC  0B.7
00B9:  GOTO   0B7
....................    delay_ms(50); //LCD power up delay 
00BA:  MOVLW  32
00BB:  MOVWF  31
00BC:  CALL   014
....................     
....................    i2c_start(); 
00BD:  BSF    03.5
00BE:  BSF    11.0
00BF:  BTFSC  11.0
00C0:  GOTO   0BF
....................    i2c_write(LCD_ADDR); 
00C1:  BCF    03.5
00C2:  MOVF   21,W
00C3:  MOVWF  3E
00C4:  CALL   028
....................       i2c_send_nibble(0x00,0); 
00C5:  CLRF   3B
00C6:  CLRF   3C
00C7:  CALL   038
....................       delay_ms(15); 
00C8:  MOVLW  0F
00C9:  MOVWF  31
00CA:  CALL   014
....................     
....................    for (i=1;i<=3;++i)    
00CB:  MOVLW  01
00CC:  MOVWF  2D
00CD:  MOVF   2D,W
00CE:  SUBLW  03
00CF:  BTFSS  03.0
00D0:  GOTO   0DA
....................    { 
....................       i2c_send_nibble(0x03,0); 
00D1:  MOVLW  03
00D2:  MOVWF  3B
00D3:  CLRF   3C
00D4:  CALL   038
....................       delay_ms(5); 
00D5:  MOVLW  05
00D6:  MOVWF  31
00D7:  CALL   014
00D8:  INCF   2D,F
00D9:  GOTO   0CD
....................    }    
....................       i2c_send_nibble(0x02,0); 
00DA:  MOVLW  02
00DB:  MOVWF  3B
00DC:  CLRF   3C
00DD:  CALL   038
....................       delay_ms(5); 
00DE:  MOVLW  05
00DF:  MOVWF  31
00E0:  CALL   014
....................    i2c_stop(); 
00E1:  BSF    03.5
00E2:  BSF    11.2
00E3:  BTFSC  11.2
00E4:  GOTO   0E3
....................     
....................    for (i=0;i<=3;++i) { 
00E5:  BCF    03.5
00E6:  CLRF   2D
00E7:  MOVF   2D,W
00E8:  SUBLW  03
00E9:  BTFSS  03.0
00EA:  GOTO   0F6
....................    lcd_send_byte(LCD_INIT_STRING[i],0); 
00EB:  MOVF   2D,W
00EC:  CALL   004
00ED:  MOVWF  2E
00EE:  MOVWF  38
00EF:  CLRF   39
00F0:  CALL   088
....................    delay_ms(5); 
00F1:  MOVLW  05
00F2:  MOVWF  31
00F3:  CALL   014
00F4:  INCF   2D,F
00F5:  GOTO   0E7
....................    } 
....................    lcd_clear();  //Clear Display 
00F6:  CALL   0A6
....................    enable_interrupts(GLOBAL); 
00F7:  MOVLW  C0
00F8:  IORWF  0B,F
00F9:  BCF    0A.3
00FA:  BCF    0A.4
00FB:  GOTO   26D (RETURN)
.................... } 
.................... 
.................... void lcd_gotoxy( byte x, byte y) 
.................... { 
.................... byte row,column,row_addr,lcd_address; 
.................... static char data; 
*
0264:  BCF    03.5
0265:  CLRF   26
.................... 
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y; 
*
00FC:  MOVF   32,W
00FD:  SUBWF  22,W
00FE:  BTFSC  03.0
00FF:  GOTO   103
0100:  MOVF   22,W
0101:  MOVWF  33
0102:  GOTO   105
0103:  MOVF   32,W
0104:  MOVWF  33
....................   
....................    switch(row) 
0105:  MOVF   33,W
0106:  XORLW  01
0107:  BTFSC  03.2
0108:  GOTO   113
0109:  XORLW  03
010A:  BTFSC  03.2
010B:  GOTO   115
010C:  XORLW  01
010D:  BTFSC  03.2
010E:  GOTO   118
010F:  XORLW  07
0110:  BTFSC  03.2
0111:  GOTO   11B
0112:  GOTO   11E
....................    { 
....................       case 1:  row_addr=addr_row_one;     break; 
0113:  CLRF   35
0114:  GOTO   11F
....................       case 2:  row_addr=addr_row_two;     break; 
0115:  MOVLW  40
0116:  MOVWF  35
0117:  GOTO   11F
....................       case 3:  row_addr=addr_row_three;   break; 
0118:  MOVLW  14
0119:  MOVWF  35
011A:  GOTO   11F
....................       case 4:  row_addr=addr_row_four;    break; 
011B:  MOVLW  54
011C:  MOVWF  35
011D:  GOTO   11F
....................       default: row_addr=addr_row_one;     break;  
011E:  CLRF   35
....................    }  
....................     
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;  
011F:  MOVF   31,W
0120:  SUBWF  23,W
0121:  BTFSC  03.0
0122:  GOTO   126
0123:  MOVF   23,W
0124:  MOVWF  34
0125:  GOTO   128
0126:  MOVF   31,W
0127:  MOVWF  34
....................    lcd_address=(row_addr+(column-1)); 
0128:  MOVLW  01
0129:  SUBWF  34,W
012A:  ADDWF  35,W
012B:  MOVWF  36
....................    lcd_send_byte(0x80|lcd_address,0); 
012C:  MOVF   36,W
012D:  IORLW  80
012E:  MOVWF  37
012F:  MOVWF  38
0130:  CLRF   39
0131:  CALL   088
0132:  RETURN
.................... } 
.................... 
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... {    
....................   switch(in_data) 
0133:  MOVF   30,W
0134:  XORLW  0C
0135:  BTFSC  03.2
0136:  GOTO   13E
0137:  XORLW  06
0138:  BTFSC  03.2
0139:  GOTO   140
013A:  XORLW  02
013B:  BTFSC  03.2
013C:  GOTO   14D
013D:  GOTO   152
....................    {  
....................      case '\f': lcd_clear();                       break;                
013E:  CALL   0A6
013F:  GOTO   157
....................       
....................      case '\n': 
....................      new_row_request++; 
0140:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1; 
0141:  MOVF   24,W
0142:  SUBWF  22,W
0143:  BTFSC  03.0
0144:  GOTO   147
0145:  MOVLW  01
0146:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request); 
0147:  MOVLW  01
0148:  MOVWF  31
0149:  MOVF   24,W
014A:  MOVWF  32
014B:  CALL   0FC
....................      break; 
014C:  GOTO   157
....................                   
....................      case '\b': lcd_send_byte(0x10,0);             break; 
014D:  MOVLW  10
014E:  MOVWF  38
014F:  CLRF   39
0150:  CALL   088
0151:  GOTO   157
....................         
....................      default: lcd_send_byte(in_data,1);            break;      
0152:  MOVF   30,W
0153:  MOVWF  38
0154:  MOVLW  01
0155:  MOVWF  39
0156:  CALL   088
....................       
....................    } 
0157:  RETURN
.................... } 
.................... 
.................... int contador=0; // variable contadora para aumenta
.................... // función para escribir por medio de i2c
.................... void escribir_i2c() {
.................... i2c_start(); // inicia comunicación i2c
*
01AE:  BSF    03.5
01AF:  BSF    11.0
01B0:  BTFSC  11.0
01B1:  GOTO   1B0
.................... i2c_write(0x42); //escribe 0x42=0100001 0 --> 0100001=33 dir, 0=Escritura
01B2:  MOVLW  42
01B3:  BCF    03.5
01B4:  MOVWF  3E
01B5:  CALL   028
.................... i2c_write(contador); // escribe la variable global contador
01B6:  MOVF   27,W
01B7:  MOVWF  3E
01B8:  CALL   028
.................... i2c_stop(); // finaliza comunicación i2c
01B9:  BSF    03.5
01BA:  BSF    11.2
01BB:  BTFSC  11.2
01BC:  GOTO   1BB
01BD:  BCF    03.5
01BE:  BCF    0A.3
01BF:  BCF    0A.4
01C0:  GOTO   285 (RETURN)
.................... }
.................... // función para escribir a través de puerto paralelo
.................... void escribir_puerto() {
.................... output_d(contador);
01C1:  BSF    03.5
01C2:  CLRF   08
01C3:  BCF    03.5
01C4:  MOVF   27,W
01C5:  MOVWF  08
01C6:  BCF    0A.3
01C7:  BCF    0A.4
01C8:  GOTO   286 (RETURN)
.................... }
.................... // función para escribir en el display lcd
.................... void escribir_lcd() {
.................... lcd_gotoxy(11,2); //posiciona cursor en (11,2)
*
01DE:  MOVLW  0B
01DF:  MOVWF  31
01E0:  MOVLW  02
01E1:  MOVWF  32
01E2:  CALL   0FC
.................... printf(lcd_putc, "%d", contador);
01E3:  MOVF   27,W
01E4:  MOVWF  2A
01E5:  MOVLW  18
01E6:  MOVWF  2B
*
023D:  BCF    0A.3
023E:  BCF    0A.4
023F:  GOTO   287 (RETURN)
.................... }
.................... //el programa es un cronometro de medio segundo
.................... void main() {
0240:  MOVF   03,W
0241:  ANDLW  1F
0242:  MOVWF  03
0243:  MOVLW  FF
0244:  MOVWF  20
0245:  BSF    20.3
0246:  MOVF   20,W
0247:  BSF    03.5
0248:  MOVWF  07
0249:  BCF    03.5
024A:  BSF    20.4
024B:  MOVF   20,W
024C:  BSF    03.5
024D:  MOVWF  07
024E:  MOVLW  31
024F:  MOVWF  13
0250:  MOVLW  28
0251:  BCF    03.5
0252:  MOVWF  14
0253:  BSF    03.5
0254:  BSF    14.7
0255:  BCF    14.6
0256:  MOVLW  01
0257:  BCF    03.5
0258:  MOVWF  24
0259:  MOVLW  08
025A:  MOVWF  25
025B:  CLRF   27
025C:  CLRF   29
025D:  CLRF   28
025E:  BSF    03.5
025F:  BSF    1F.0
0260:  BSF    1F.1
0261:  BSF    1F.2
0262:  BCF    1F.3
0263:  BCF    03.7
.................... lcd_init(78,16,2); // inicialización display lcd --> dir = 0100111 = 39
*
0266:  MOVLW  4E
0267:  MOVWF  2A
0268:  MOVLW  10
0269:  MOVWF  2B
026A:  MOVLW  02
026B:  MOVWF  2C
026C:  GOTO   0B0
.................... lcd_gotoxy(1,1); // posiciona cursor en 1,1
026D:  MOVLW  01
026E:  MOVWF  31
026F:  MOVWF  32
0270:  CALL   0FC
.................... printf(lcd_putc,"UNAM\n"); //escribe en display
0271:  MOVLW  0C
0272:  BSF    03.6
0273:  MOVWF  0D
0274:  MOVLW  00
0275:  MOVWF  0F
0276:  BCF    03.6
0277:  CALL   158
.................... lcd_gotoxy(1,2); // posiciona cursor en 1,2
0278:  MOVLW  01
0279:  MOVWF  31
027A:  MOVLW  02
027B:  MOVWF  32
027C:  CALL   0FC
.................... printf(lcd_putc,"Contador="); // escribe en display
027D:  MOVLW  0F
027E:  BSF    03.6
027F:  MOVWF  0D
0280:  MOVLW  00
0281:  MOVWF  0F
0282:  BCF    03.6
0283:  CALL   158
.................... while(true) {
.................... escribir_i2c(); // escribe en consola
0284:  GOTO   1AE
.................... escribir_puerto(); // escribe por puerto d
0285:  GOTO   1C1
.................... escribir_lcd(); // escribe en el lcd
0286:  GOTO   1DE
.................... delay_ms(500); // retardo de medio segundo
0287:  MOVLW  02
0288:  MOVWF  2A
0289:  MOVLW  FA
028A:  MOVWF  31
028B:  CALL   014
028C:  DECFSZ 2A,F
028D:  GOTO   289
.................... contador++; // aumenta valor de contador
028E:  INCF   27,F
028F:  GOTO   284
.................... }
.................... }
.................... 
0290:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

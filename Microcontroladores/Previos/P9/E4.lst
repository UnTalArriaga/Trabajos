CCS PCM C Compiler, Version 5.093, 4770               23-may.-23 20:49

               Filename:   D:\Escuela\Semestre 23-2\LabMicros\Previos\P9\E4.lst

               ROM used:   621 words (8%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           33 (9%) worst case
               Stack used: 6 locations
               Stack size: 8

0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   21C
0003:  NOP
.................... #include <16F877.h> // biblioteca del microprocesador
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 55,27
000D:  DATA C1,26
000E:  DATA 0A,00
000F:  DATA C3,37
0010:  DATA 6E,3A
0011:  DATA 61,32
0012:  DATA 6F,39
0013:  DATA 3D,10
0014:  DATA 00,00
*
0159:  MOVF   0B,W
015A:  MOVWF  2A
015B:  BCF    0B.7
015C:  BSF    03.5
015D:  BSF    03.6
015E:  BSF    0C.7
015F:  BSF    0C.0
0160:  NOP
0161:  NOP
0162:  BCF    03.5
0163:  BCF    03.6
0164:  BTFSC  2A.7
0165:  BSF    0B.7
0166:  BSF    03.6
0167:  MOVF   0C,W
0168:  ANDLW  7F
0169:  BTFSC  03.2
016A:  GOTO   1AD
016B:  BCF    03.6
016C:  MOVWF  2A
016D:  BSF    03.6
016E:  MOVF   0D,W
016F:  BCF    03.6
0170:  MOVWF  2B
0171:  BSF    03.6
0172:  MOVF   0F,W
0173:  BCF    03.6
0174:  MOVWF  2C
0175:  MOVF   2A,W
0176:  MOVWF  2D
0177:  CALL   134
0178:  MOVF   2B,W
0179:  BSF    03.6
017A:  MOVWF  0D
017B:  BCF    03.6
017C:  MOVF   2C,W
017D:  BSF    03.6
017E:  MOVWF  0F
017F:  BCF    03.6
0180:  MOVF   0B,W
0181:  MOVWF  2D
0182:  BCF    0B.7
0183:  BSF    03.5
0184:  BSF    03.6
0185:  BSF    0C.7
0186:  BSF    0C.0
0187:  NOP
0188:  NOP
0189:  BCF    03.5
018A:  BCF    03.6
018B:  BTFSC  2D.7
018C:  BSF    0B.7
018D:  BSF    03.6
018E:  RLF    0C,W
018F:  RLF    0E,W
0190:  ANDLW  7F
0191:  BTFSC  03.2
0192:  GOTO   1AD
0193:  BCF    03.6
0194:  MOVWF  2A
0195:  BSF    03.6
0196:  MOVF   0D,W
0197:  BCF    03.6
0198:  MOVWF  2B
0199:  BSF    03.6
019A:  MOVF   0F,W
019B:  BCF    03.6
019C:  MOVWF  2C
019D:  MOVF   2A,W
019E:  MOVWF  2D
019F:  CALL   134
01A0:  MOVF   2B,W
01A1:  BSF    03.6
01A2:  MOVWF  0D
01A3:  BCF    03.6
01A4:  MOVF   2C,W
01A5:  BSF    03.6
01A6:  MOVWF  0F
01A7:  INCF   0D,F
01A8:  BTFSC  03.2
01A9:  INCF   0F,F
01AA:  BCF    03.6
01AB:  GOTO   159
01AC:  BSF    03.6
01AD:  BCF    03.6
01AE:  RETURN
*
01F9:  BTFSC  2B.7
01FA:  GOTO   20B
01FB:  MOVLW  0F
01FC:  MOVWF  77
01FD:  SWAPF  2A,W
01FE:  ANDWF  77,F
01FF:  MOVLW  0A
0200:  SUBWF  77,W
0201:  BTFSC  03.0
0202:  GOTO   206
0203:  MOVLW  30
0204:  ADDWF  77,F
0205:  GOTO   208
0206:  MOVF   2B,W
0207:  ADDWF  77,F
0208:  MOVF   77,W
0209:  MOVWF  2D
020A:  CALL   134
020B:  MOVLW  0F
020C:  ANDWF  2A,F
020D:  MOVLW  0A
020E:  SUBWF  2A,W
020F:  BTFSC  03.0
0210:  GOTO   213
0211:  MOVLW  30
0212:  GOTO   215
0213:  BCF    2B.7
0214:  MOVF   2B,W
0215:  ADDWF  2A,F
0216:  MOVF   2A,W
0217:  MOVWF  2D
0218:  CALL   134
.................... 
.................... #list
.................... 
.................... #fuses HS,NOWDT,NOPROTECT // conexiones eléctricas
.................... #use delay(clock=20000000) // 20 MHz
*
0015:  MOVLW  2E
0016:  MOVWF  04
0017:  BCF    03.7
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   028
001B:  MOVLW  06
001C:  MOVWF  78
001D:  CLRF   77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 78,F
0021:  GOTO   01D
0022:  MOVLW  7B
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 00,F
0027:  GOTO   01B
0028:  RETURN
.................... #use i2c(MASTER, SDA=PIN_C4, SCL=PIN_C3,SLOW, NOFORCE_SW) // configuración comunicación síncrona I2C
0029:  BCF    14.7
002A:  BCF    0C.3
002B:  MOVF   3B,W
002C:  MOVWF  13
002D:  MOVLW  02
002E:  BTFSC  14.7
002F:  GOTO   037
0030:  BTFSS  0C.3
0031:  GOTO   030
0032:  MOVLW  00
0033:  BSF    03.5
0034:  BTFSC  11.6
0035:  MOVLW  01
0036:  BCF    03.5
0037:  MOVWF  78
0038:  RETURN
*
01AF:  BCF    14.6
01B0:  BSF    03.5
01B1:  BSF    11.3
01B2:  BTFSC  11.3
01B3:  GOTO   1B2
01B4:  BTFSC  77.0
01B5:  BCF    11.5
01B6:  BTFSS  77.0
01B7:  BSF    11.5
01B8:  BSF    11.4
01B9:  BTFSC  11.4
01BA:  GOTO   1B9
01BB:  BCF    03.5
01BC:  MOVF   13,W
01BD:  MOVWF  78
01BE:  RETURN
.................... #include <i2c_LCD.c> // biblioteca para control de display LCD.
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns 
.................... //                using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.1 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD display 
.................... //     \n Set write position on next lcd line 
.................... //     \b LCD backspace 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from 
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C. 
.................... //              The tests of these routines have been programmed using the IC 
.................... //              Phillips PCF8574T. I've used 4 bits mode programming. 
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T. 
.................... //              RW Pin is not being used. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW    (Not used!) 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module 
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4 
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20   
.................... 
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
.................... 
.................... #define addr_row_one          0x00        //LCD RAM address for row 1 
.................... #define addr_row_two          0x40        //LCD RAM address for row 2 
.................... #define addr_row_three        0x14        //LCD RAM address for row 3 
.................... #define addr_row_four         0x54        //LCD RAM address for row 4 
.................... 
.................... #define ON                    1 
.................... #define OFF                   0 
.................... #define NOT                   ~ 
.................... #define data_shifted          data<<4 
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT; 
.................... 
.................... void lcd_backlight_led(byte bl) 
.................... {  
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF; 
.................... } 
.................... 
.................... void i2c_send_nibble(byte data, byte type) 
.................... {    
....................    switch (type) 
*
0039:  MOVF   39,W
003A:  XORLW  00
003B:  BTFSC  03.2
003C:  GOTO   041
003D:  XORLW  01
003E:  BTFSC  03.2
003F:  GOTO   064
0040:  GOTO   088
....................    {      
....................       case 0 :      
....................       i2c_write(data_shifted | BACKLIGHT_LED); 
0041:  SWAPF  38,W
0042:  MOVWF  77
0043:  MOVLW  F0
0044:  ANDWF  77,F
0045:  MOVF   77,W
0046:  IORWF  25,W
0047:  MOVWF  3A
0048:  MOVWF  3B
0049:  CALL   029
....................       delay_cycles(1); 
004A:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED ); 
004B:  SWAPF  38,W
004C:  MOVWF  77
004D:  MOVLW  F0
004E:  ANDWF  77,F
004F:  MOVF   77,W
0050:  IORLW  04
0051:  IORWF  25,W
0052:  MOVWF  3A
0053:  MOVWF  3B
0054:  CALL   029
....................       delay_us(2); 
0055:  MOVLW  03
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED); 
0059:  SWAPF  38,W
005A:  MOVWF  77
005B:  MOVLW  F0
005C:  ANDWF  77,F
005D:  MOVF   77,W
005E:  ANDLW  FB
005F:  IORWF  25,W
0060:  MOVWF  3A
0061:  MOVWF  3B
0062:  CALL   029
....................       break; 
0063:  GOTO   088
....................       
....................       case 1 : 
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
0064:  SWAPF  38,W
0065:  MOVWF  77
0066:  MOVLW  F0
0067:  ANDWF  77,F
0068:  MOVF   77,W
0069:  IORLW  01
006A:  IORWF  25,W
006B:  MOVWF  3A
006C:  MOVWF  3B
006D:  CALL   029
....................       delay_cycles(1); 
006E:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED ); 
006F:  SWAPF  38,W
0070:  MOVWF  77
0071:  MOVLW  F0
0072:  ANDWF  77,F
0073:  MOVF   77,W
0074:  IORLW  01
0075:  IORLW  04
0076:  IORWF  25,W
0077:  MOVWF  3A
0078:  MOVWF  3B
0079:  CALL   029
....................       delay_us(2); 
007A:  MOVLW  03
007B:  MOVWF  77
007C:  DECFSZ 77,F
007D:  GOTO   07C
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
007E:  SWAPF  38,W
007F:  MOVWF  77
0080:  MOVLW  F0
0081:  ANDWF  77,F
0082:  MOVF   77,W
0083:  IORLW  01
0084:  IORWF  25,W
0085:  MOVWF  3A
0086:  MOVWF  3B
0087:  CALL   029
....................       break; 
....................    } 
0088:  RETURN
.................... } 
....................     
.................... void lcd_send_byte(byte data, byte type) 
....................    { 
....................         i2c_start(); 
0089:  BSF    03.5
008A:  BSF    11.0
008B:  BTFSC  11.0
008C:  GOTO   08B
....................         i2c_write(LCD_ADDR); 
008D:  BCF    03.5
008E:  MOVF   21,W
008F:  MOVWF  3B
0090:  CALL   029
....................         i2c_send_nibble(data >> 4 , type); 
0091:  SWAPF  35,W
0092:  MOVWF  37
0093:  MOVLW  0F
0094:  ANDWF  37,F
0095:  MOVF   37,W
0096:  MOVWF  38
0097:  MOVF   36,W
0098:  MOVWF  39
0099:  CALL   039
....................         i2c_send_nibble(data & 0xf , type); 
009A:  MOVF   35,W
009B:  ANDLW  0F
009C:  MOVWF  37
009D:  MOVWF  38
009E:  MOVF   36,W
009F:  MOVWF  39
00A0:  CALL   039
....................         i2c_stop();        
00A1:  BSF    03.5
00A2:  BSF    11.2
00A3:  BTFSC  11.2
00A4:  GOTO   0A3
00A5:  BCF    03.5
00A6:  RETURN
....................    } 
.................... 
.................... void lcd_clear() 
.................... {  
....................         lcd_send_byte(0x01,0); 
00A7:  MOVLW  01
00A8:  MOVWF  35
00A9:  CLRF   36
00AA:  CALL   089
....................         delay_ms(2); 
00AB:  MOVLW  02
00AC:  MOVWF  2E
00AD:  CALL   015
....................         new_row_request=1; 
00AE:  MOVLW  01
00AF:  MOVWF  24
00B0:  RETURN
.................... } 
.................... 
.................... void lcd_init(byte ADDR, byte col, byte row) 
.................... { 
....................    byte i;
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines 
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up.
....................    
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module 
00B1:  MOVF   2A,W
00B2:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4 
00B3:  MOVF   2C,W
00B4:  MOVWF  22
....................    lcd_total_columns= col ;
00B5:  MOVF   2B,W
00B6:  MOVWF  23
....................    disable_interrupts(GLOBAL); 
00B7:  BCF    0B.6
00B8:  BCF    0B.7
00B9:  BTFSC  0B.7
00BA:  GOTO   0B8
....................    delay_ms(50); //LCD power up delay 
00BB:  MOVLW  32
00BC:  MOVWF  2E
00BD:  CALL   015
....................     
....................    i2c_start(); 
00BE:  BSF    03.5
00BF:  BSF    11.0
00C0:  BTFSC  11.0
00C1:  GOTO   0C0
....................    i2c_write(LCD_ADDR); 
00C2:  BCF    03.5
00C3:  MOVF   21,W
00C4:  MOVWF  3B
00C5:  CALL   029
....................       i2c_send_nibble(0x00,0); 
00C6:  CLRF   38
00C7:  CLRF   39
00C8:  CALL   039
....................       delay_ms(15); 
00C9:  MOVLW  0F
00CA:  MOVWF  2E
00CB:  CALL   015
....................     
....................    for (i=1;i<=3;++i)    
00CC:  MOVLW  01
00CD:  MOVWF  2D
00CE:  MOVF   2D,W
00CF:  SUBLW  03
00D0:  BTFSS  03.0
00D1:  GOTO   0DB
....................    { 
....................       i2c_send_nibble(0x03,0); 
00D2:  MOVLW  03
00D3:  MOVWF  38
00D4:  CLRF   39
00D5:  CALL   039
....................       delay_ms(5); 
00D6:  MOVLW  05
00D7:  MOVWF  2E
00D8:  CALL   015
00D9:  INCF   2D,F
00DA:  GOTO   0CE
....................    }    
....................       i2c_send_nibble(0x02,0); 
00DB:  MOVLW  02
00DC:  MOVWF  38
00DD:  CLRF   39
00DE:  CALL   039
....................       delay_ms(5); 
00DF:  MOVLW  05
00E0:  MOVWF  2E
00E1:  CALL   015
....................    i2c_stop(); 
00E2:  BSF    03.5
00E3:  BSF    11.2
00E4:  BTFSC  11.2
00E5:  GOTO   0E4
....................     
....................    for (i=0;i<=3;++i) { 
00E6:  BCF    03.5
00E7:  CLRF   2D
00E8:  MOVF   2D,W
00E9:  SUBLW  03
00EA:  BTFSS  03.0
00EB:  GOTO   0F7
....................    lcd_send_byte(LCD_INIT_STRING[i],0); 
00EC:  MOVF   2D,W
00ED:  CALL   004
00EE:  MOVWF  2E
00EF:  MOVWF  35
00F0:  CLRF   36
00F1:  CALL   089
....................    delay_ms(5); 
00F2:  MOVLW  05
00F3:  MOVWF  2E
00F4:  CALL   015
00F5:  INCF   2D,F
00F6:  GOTO   0E8
....................    } 
....................    lcd_clear();  //Clear Display 
00F7:  CALL   0A7
....................    enable_interrupts(GLOBAL); 
00F8:  MOVLW  C0
00F9:  IORWF  0B,F
00FA:  BCF    0A.3
00FB:  BCF    0A.4
00FC:  GOTO   249 (RETURN)
.................... } 
.................... 
.................... void lcd_gotoxy( byte x, byte y) 
.................... { 
.................... byte row,column,row_addr,lcd_address; 
.................... static char data; 
*
0240:  BCF    03.5
0241:  CLRF   26
.................... 
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y; 
*
00FD:  MOVF   2F,W
00FE:  SUBWF  22,W
00FF:  BTFSC  03.0
0100:  GOTO   104
0101:  MOVF   22,W
0102:  MOVWF  30
0103:  GOTO   106
0104:  MOVF   2F,W
0105:  MOVWF  30
....................   
....................    switch(row) 
0106:  MOVF   30,W
0107:  XORLW  01
0108:  BTFSC  03.2
0109:  GOTO   114
010A:  XORLW  03
010B:  BTFSC  03.2
010C:  GOTO   116
010D:  XORLW  01
010E:  BTFSC  03.2
010F:  GOTO   119
0110:  XORLW  07
0111:  BTFSC  03.2
0112:  GOTO   11C
0113:  GOTO   11F
....................    { 
....................       case 1:  row_addr=addr_row_one;     break; 
0114:  CLRF   32
0115:  GOTO   120
....................       case 2:  row_addr=addr_row_two;     break; 
0116:  MOVLW  40
0117:  MOVWF  32
0118:  GOTO   120
....................       case 3:  row_addr=addr_row_three;   break; 
0119:  MOVLW  14
011A:  MOVWF  32
011B:  GOTO   120
....................       case 4:  row_addr=addr_row_four;    break; 
011C:  MOVLW  54
011D:  MOVWF  32
011E:  GOTO   120
....................       default: row_addr=addr_row_one;     break;  
011F:  CLRF   32
....................    }  
....................     
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;  
0120:  MOVF   2E,W
0121:  SUBWF  23,W
0122:  BTFSC  03.0
0123:  GOTO   127
0124:  MOVF   23,W
0125:  MOVWF  31
0126:  GOTO   129
0127:  MOVF   2E,W
0128:  MOVWF  31
....................    lcd_address=(row_addr+(column-1)); 
0129:  MOVLW  01
012A:  SUBWF  31,W
012B:  ADDWF  32,W
012C:  MOVWF  33
....................    lcd_send_byte(0x80|lcd_address,0); 
012D:  MOVF   33,W
012E:  IORLW  80
012F:  MOVWF  34
0130:  MOVWF  35
0131:  CLRF   36
0132:  CALL   089
0133:  RETURN
.................... } 
.................... 
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... {    
....................   switch(in_data) 
0134:  MOVF   2D,W
0135:  XORLW  0C
0136:  BTFSC  03.2
0137:  GOTO   13F
0138:  XORLW  06
0139:  BTFSC  03.2
013A:  GOTO   141
013B:  XORLW  02
013C:  BTFSC  03.2
013D:  GOTO   14E
013E:  GOTO   153
....................    {  
....................      case '\f': lcd_clear();                       break;                
013F:  CALL   0A7
0140:  GOTO   158
....................       
....................      case '\n': 
....................      new_row_request++; 
0141:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1; 
0142:  MOVF   24,W
0143:  SUBWF  22,W
0144:  BTFSC  03.0
0145:  GOTO   148
0146:  MOVLW  01
0147:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request); 
0148:  MOVLW  01
0149:  MOVWF  2E
014A:  MOVF   24,W
014B:  MOVWF  2F
014C:  CALL   0FD
....................      break; 
014D:  GOTO   158
....................                   
....................      case '\b': lcd_send_byte(0x10,0);             break; 
014E:  MOVLW  10
014F:  MOVWF  35
0150:  CLRF   36
0151:  CALL   089
0152:  GOTO   158
....................         
....................      default: lcd_send_byte(in_data,1);            break;      
0153:  MOVF   2D,W
0154:  MOVWF  35
0155:  MOVLW  01
0156:  MOVWF  36
0157:  CALL   089
....................       
....................    } 
0158:  RETURN
.................... } 
.................... 
.................... int contador=0; // variable contadora para aumenta
.................... // funcion para escribir por medio de i2c
.................... void escribir_i2c() {
.................... i2c_start(); // inicia comunicación i2c
*
01D3:  BSF    03.5
01D4:  BSF    11.0
01D5:  BTFSC  11.0
01D6:  GOTO   1D5
.................... i2c_write(0x45); //escribe 0x42=01000010 --> 0100001=33 dir, 0 = Escritura
01D7:  MOVLW  45
01D8:  BCF    03.5
01D9:  MOVWF  3B
01DA:  CALL   029
.................... contador = i2c_read(); // escribe la variable global contador
01DB:  MOVLW  01
01DC:  MOVWF  77
01DD:  CALL   1AF
01DE:  MOVF   78,W
01DF:  MOVWF  27
.................... i2c_stop(); // finaliza comunicación i2c
01E0:  BSF    03.5
01E1:  BSF    11.2
01E2:  BTFSC  11.2
01E3:  GOTO   1E2
01E4:  BCF    03.5
01E5:  BCF    0A.3
01E6:  BCF    0A.4
01E7:  GOTO   262 (RETURN)
.................... }
.................... // funcion para escribir a través de puerto paralelo
.................... void escribir_puerto() {
.................... output_d(contador);
01E8:  BSF    03.5
01E9:  CLRF   08
01EA:  BCF    03.5
01EB:  MOVF   27,W
01EC:  MOVWF  08
01ED:  BCF    0A.3
01EE:  BCF    0A.4
01EF:  GOTO   263 (RETURN)
.................... }
.................... // función para escribir en el display lcd
.................... void escribir_lcd() {
.................... lcd_gotoxy(11,2); //posiciona cursor en (11,2)
01F0:  MOVLW  0B
01F1:  MOVWF  2E
01F2:  MOVLW  02
01F3:  MOVWF  2F
01F4:  CALL   0FD
.................... printf(lcd_putc, "%x", contador);
01F5:  MOVF   27,W
01F6:  MOVWF  2A
01F7:  MOVLW  57
01F8:  MOVWF  2B
*
0219:  BCF    0A.3
021A:  BCF    0A.4
021B:  GOTO   264 (RETURN)
.................... }
.................... // función para leer de dispositivo i2c
.................... void leer_i2c() {
.................... i2c_start(); // inicia comunicación i2c
*
01BF:  BSF    03.5
01C0:  BSF    11.0
01C1:  BTFSC  11.0
01C2:  GOTO   1C1
.................... i2c_write(0x41); // excribe 0x41 = 0100000 1 --> 0100000 = 32, 1 = Lectura
01C3:  MOVLW  41
01C4:  BCF    03.5
01C5:  MOVWF  3B
01C6:  CALL   029
.................... contador = i2c_read(0);
01C7:  CLRF   77
01C8:  CALL   1AF
01C9:  MOVF   78,W
01CA:  MOVWF  27
.................... i2c_stop(); // finaliza comunicación I2C
01CB:  BSF    03.5
01CC:  BSF    11.2
01CD:  BTFSC  11.2
01CE:  GOTO   1CD
01CF:  BCF    03.5
01D0:  BCF    0A.3
01D1:  BCF    0A.4
01D2:  GOTO   261 (RETURN)
.................... }
.................... //el programa es un cronometro de medio segundo
.................... void main() {
*
021C:  MOVF   03,W
021D:  ANDLW  1F
021E:  MOVWF  03
021F:  MOVLW  FF
0220:  MOVWF  20
0221:  BSF    20.3
0222:  MOVF   20,W
0223:  BSF    03.5
0224:  MOVWF  07
0225:  BCF    03.5
0226:  BSF    20.4
0227:  MOVF   20,W
0228:  BSF    03.5
0229:  MOVWF  07
022A:  MOVLW  31
022B:  MOVWF  13
022C:  MOVLW  28
022D:  BCF    03.5
022E:  MOVWF  14
022F:  BSF    03.5
0230:  BSF    14.7
0231:  BCF    14.6
0232:  MOVLW  01
0233:  BCF    03.5
0234:  MOVWF  24
0235:  MOVLW  08
0236:  MOVWF  25
0237:  CLRF   27
0238:  CLRF   29
0239:  CLRF   28
023A:  BSF    03.5
023B:  BSF    1F.0
023C:  BSF    1F.1
023D:  BSF    1F.2
023E:  BCF    1F.3
023F:  BCF    03.7
.................... lcd_init(78,16,2); // inicialización display lcd --> dir = 0100111 = 39
*
0242:  MOVLW  4E
0243:  MOVWF  2A
0244:  MOVLW  10
0245:  MOVWF  2B
0246:  MOVLW  02
0247:  MOVWF  2C
0248:  GOTO   0B1
.................... lcd_gotoxy(1,1); // posiciona cursor en 1,1
0249:  MOVLW  01
024A:  MOVWF  2E
024B:  MOVWF  2F
024C:  CALL   0FD
.................... printf(lcd_putc,"UNAM\n"); //escribe en display
024D:  MOVLW  0C
024E:  BSF    03.6
024F:  MOVWF  0D
0250:  MOVLW  00
0251:  MOVWF  0F
0252:  BCF    03.6
0253:  CALL   159
.................... lcd_gotoxy(1,2); // posiciona cursor en 1,2
0254:  MOVLW  01
0255:  MOVWF  2E
0256:  MOVLW  02
0257:  MOVWF  2F
0258:  CALL   0FD
.................... printf(lcd_putc,"Contador= "); // escribe en display
0259:  MOVLW  0F
025A:  BSF    03.6
025B:  MOVWF  0D
025C:  MOVLW  00
025D:  MOVWF  0F
025E:  BCF    03.6
025F:  CALL   159
.................... while(true) {
.................... leer_i2c(); // lee valor
0260:  GOTO   1BF
.................... escribir_i2c(); // escribe en consola
0261:  GOTO   1D3
.................... escribir_puerto(); // escribe por puerto b
0262:  GOTO   1E8
.................... escribir_lcd();
0263:  GOTO   1F0
.................... delay_ms(500); // retardo de medio segundo
0264:  MOVLW  02
0265:  MOVWF  2A
0266:  MOVLW  FA
0267:  MOVWF  2E
0268:  CALL   015
0269:  DECFSZ 2A,F
026A:  GOTO   266
026B:  GOTO   260
.................... }
.................... }
.................... 
026C:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
